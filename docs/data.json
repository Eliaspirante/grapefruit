{
    "project": {
        "name": "gf",
        "description": "A fun and easy WebGL-enabled JavaScript Game Engine",
        "version": "0.0.2",
        "url": "https://github.com/englercj/grapefruit"
    },
    "files": {
        "src\\audio\\AudioManager.js": {
            "name": "src\\audio\\AudioManager.js",
            "modules": {},
            "classes": {
                "AudioManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\audio\\AudioPlayer.js": {
            "name": "src\\audio\\AudioPlayer.js",
            "modules": {},
            "classes": {
                "AudoPlayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\AnimatedSprite.js": {
            "name": "src\\display\\AnimatedSprite.js",
            "modules": {},
            "classes": {
                "AnimatedSprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Camera.js": {
            "name": "src\\display\\Camera.js",
            "modules": {},
            "classes": {
                "Camera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\DisplayObjectContainer.js": {
            "name": "src\\display\\DisplayObjectContainer.js",
            "modules": {},
            "classes": {
                "DisplayObjectContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\display\\Sprite.js": {
            "name": "src\\display\\Sprite.js",
            "modules": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\Game.js": {
            "name": "src\\game\\Game.js",
            "modules": {},
            "classes": {
                "Game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game\\GameState.js": {
            "name": "src\\game\\GameState.js",
            "modules": {},
            "classes": {
                "GameState": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\gui\\Gui.js": {
            "name": "src\\gui\\Gui.js",
            "modules": {},
            "classes": {
                "Gui": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\gui\\GuiItem.js": {
            "name": "src\\gui\\GuiItem.js",
            "modules": {},
            "classes": {
                "GuiItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\GamepadButtons.js": {
            "name": "src\\input\\GamepadButtons.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\GamepadSticks.js": {
            "name": "src\\input\\GamepadSticks.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Input.js": {
            "name": "src\\input\\Input.js",
            "modules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\InputManager.js": {
            "name": "src\\input\\InputManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Keyboard.js": {
            "name": "src\\input\\Keyboard.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Mouse.js": {
            "name": "src\\input\\Mouse.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\loader\\AssetLoader.js": {
            "name": "src\\loader\\AssetLoader.js",
            "modules": {},
            "classes": {
                "AssetLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\loader\\AudioLoader.js": {
            "name": "src\\loader\\AudioLoader.js",
            "modules": {},
            "classes": {
                "AudioLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\loader\\JsonLoader.js": {
            "name": "src\\loader\\JsonLoader.js",
            "modules": {},
            "classes": {
                "JsonLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\loader\\TextureLoader.js": {
            "name": "src\\loader\\TextureLoader.js",
            "modules": {},
            "classes": {
                "TextureLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledLayer.js": {
            "name": "src\\map\\tiled\\TiledLayer.js",
            "modules": {},
            "classes": {
                "TiledLayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledMap.js": {
            "name": "src\\map\\tiled\\TiledMap.js",
            "modules": {},
            "classes": {
                "TiledMap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledObjectGroup.js": {
            "name": "src\\map\\tiled\\TiledObjectGroup.js",
            "modules": {},
            "classes": {
                "TiledObjectGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledTileset.js": {
            "name": "src\\map\\tiled\\TiledTileset.js",
            "modules": {},
            "classes": {
                "TiledTileset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\ImageLayer.js": {
            "name": "src\\map\\ImageLayer.js",
            "modules": {},
            "classes": {
                "ImageLayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\Layer.js": {
            "name": "src\\map\\Layer.js",
            "modules": {},
            "classes": {
                "Layer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\Map.js": {
            "name": "src\\map\\Map.js",
            "modules": {},
            "classes": {
                "Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\Tile.js": {
            "name": "src\\map\\Tile.js",
            "modules": {},
            "classes": {
                "Tile": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\pool\\SpritePool.js": {
            "name": "src\\pool\\SpritePool.js",
            "modules": {},
            "classes": {
                "SpritePool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\Clock.js": {
            "name": "src\\utils\\Clock.js",
            "modules": {},
            "classes": {
                "Clock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\Vector.js": {
            "name": "src\\utils\\Vector.js",
            "modules": {},
            "classes": {
                "Vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\math.js": {
            "name": "src\\utils\\math.js",
            "modules": {},
            "classes": {
                "math": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\utils.js": {
            "name": "src\\utils\\utils.js",
            "modules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\core.js": {
            "name": "src\\core.js",
            "modules": {},
            "classes": {
                "Point": 1,
                "Rectangle": 1,
                "Circle": 1,
                "Ellipse": 1,
                "Polygon": 1,
                "Texture": 1,
                "support": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\plugin.js": {
            "name": "src\\plugin.js",
            "modules": {},
            "classes": {
                "plugin": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AudioManager": {
            "name": "AudioManager",
            "shortname": "AudioManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\audio\\AudioManager.js",
            "line": 4,
            "description": "Grapefruit Audio API, provides an easy interface to use HTML5 Audio\nThe GF Audio API was based on\n<a href=\"https://github.com/goldfire/howler.js\">Howler.js</a>",
            "is_constructor": 1
        },
        "AudoPlayer": {
            "name": "AudoPlayer",
            "shortname": "AudoPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\audio\\AudioPlayer.js",
            "line": 1,
            "description": "Grapefruit Audio API, provides an easy interface to use HTML5 Audio\nThe GF Audio API was based on\n<a href=\"https://github.com/goldfire/howler.js\">Howler.js</a>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "manager",
                    "description": "AudioManager instance for this audio player",
                    "type": "AudioManager"
                }
            ]
        },
        "AnimatedSprite": {
            "name": "AnimatedSprite",
            "shortname": "AnimatedSprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\AnimatedSprite.js",
            "line": 1,
            "description": "The base AnimatedSprite class",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "animations",
                    "description": "An object of the form <code>{ animationName: [frame1, frame2] }</code> or you can also specify overrides on a per-animation basis:\n     <code>{ animationName: { frames: [frame1, frame2], speed: 2 } }. Each frame is a Texture object",
                    "type": "Object"
                },
                {
                    "name": "speed",
                    "description": "The speed of the animations (can be overriden on a specific animations)",
                    "type": "Number"
                },
                {
                    "name": "start",
                    "description": "The animation to start with, defaults to the first found key otherwise",
                    "type": "String"
                }
            ]
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Camera.js",
            "line": 1,
            "description": "A basic Camera object that provides some effects. It also will contain the HUD and GUI\nto ensure they are using \"screen-coords\".\n\nTODO: Currently fade/flash don't show the colors. How should I actually show them, a gf.Sprite?",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game this camera belongs to",
                    "type": "Game"
                },
                {
                    "name": "settings",
                    "description": "Any settings you want to override the default properties with",
                    "type": "Object"
                }
            ]
        },
        "DisplayObjectContainer": {
            "name": "DisplayObjectContainer",
            "shortname": "DisplayObjectContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 1,
            "description": "The base display object, that anything being put on the screen inherits from",
            "extends": "PIXI.DisplayObjectContainer",
            "is_constructor": 1
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\display\\Sprite.js",
            "line": 1,
            "description": "The base Sprite class. This class is the base for all images on the screen",
            "extends": "PIXI.Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture to set the sprite to",
                    "type": "Texture"
                },
                {
                    "name": "pos",
                    "description": "The starting position of the sprite",
                    "type": "Array|Vector|Point|Number"
                },
                {
                    "name": "settings",
                    "description": "Settings to override the defauls",
                    "type": "Object"
                }
            ],
            "example": [
                "\n     var spr = new gf.Sprite(texture, [10, 1], { name: 'MySprite' });"
            ]
        },
        "Game": {
            "name": "Game",
            "shortname": "Game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\Game.js",
            "line": 1,
            "description": "Main game object, controls the entire instance of the game",
            "is_constructor": 1,
            "params": [
                {
                    "name": "contId",
                    "description": "The container for the new canvas we will create for the game",
                    "type": "String"
                },
                {
                    "name": "settings",
                    "description": "Options such as renderMethod and interactive (whether the stage can be clicked)",
                    "type": "Object"
                }
            ]
        },
        "GameState": {
            "name": "GameState",
            "shortname": "GameState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\game\\GameState.js",
            "line": 1,
            "description": "GameStates are different , controls the entire instance of the game",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game instance this GameState belongs to",
                    "type": "Game"
                },
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n     var state = new gf.GameState(game, 'battle');\n     state.addChild(battlePlayer);\n     state.addChild(enemy);\n\n     game.enableState(state); //or you can use the name from the ctor 'battle'"
            ]
        },
        "Gui": {
            "name": "Gui",
            "shortname": "Gui",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\gui\\Gui.js",
            "line": 1,
            "description": "The base Gui that holds GuiItems to be added to the Camera",
            "extends": "DisplayObject",
            "is_constructor": 1
        },
        "GuiItem": {
            "name": "GuiItem",
            "shortname": "GuiItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\gui\\GuiItem.js",
            "line": 1,
            "description": "The base GuiItem that represents an element of a gui on the screen.",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "texture",
                    "description": "The texture to set the sprite to",
                    "type": "Texture"
                }
            ]
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Input.js",
            "line": 178,
            "description": "The base Input object, holds common functions and properties between input types",
            "is_constructor": 1,
            "params": [
                {
                    "name": "manager",
                    "description": "The InputManager instance that this Input object is managed by",
                    "type": "InputManager"
                },
                {
                    "name": "game",
                    "description": "The game this camera belongs to",
                    "type": "Game"
                }
            ]
        },
        "AssetLoader": {
            "name": "AssetLoader",
            "shortname": "AssetLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\loader\\AssetLoader.js",
            "line": 1,
            "description": "The AssetLoader loads and parses different game assets, such as sounds, textures,\nTMX World JSON file (exported from the <a href=\"http://mapeditor.org\">Tiled Editor</a>),\nand Spritesheet JSON files (published from <a href=\"http://www.codeandweb.com/texturepacker\">Texture Packer</a>).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "assets",
                    "description": "Array of assets to load when `.load()` is called",
                    "type": "Array"
                }
            ],
            "example": [
                "\n     var loader = new AssetLoader(['/my/texture.png']);\n     loader.load();\n     //OR\n     var loader = new AssetLoader();\n     loader.load(['/my/texture.png']);"
            ]
        },
        "AudioLoader": {
            "name": "AudioLoader",
            "shortname": "AudioLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\loader\\AudioLoader.js",
            "line": 1,
            "description": "Loads an audio clip",
            "is_constructor": 1
        },
        "JsonLoader": {
            "name": "JsonLoader",
            "shortname": "JsonLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\loader\\JsonLoader.js",
            "line": 1,
            "description": "Loads json data",
            "is_constructor": 1
        },
        "TextureLoader": {
            "name": "TextureLoader",
            "shortname": "TextureLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\loader\\TextureLoader.js",
            "line": 1,
            "description": "Loads a texture image",
            "is_constructor": 1
        },
        "TiledLayer": {
            "name": "TiledLayer",
            "shortname": "TiledLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 1,
            "description": "The TiledLayer is the visual tiled layer that actually displays on the screen\n\nThis class will be created by the TiledMap, there shouldn't be a reason to\ncreate an instance on your own.",
            "extends": "Layer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "layer",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "TiledMap": {
            "name": "TiledMap",
            "shortname": "TiledMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 1,
            "description": "Tiled map, expects a Tiled TMX file loaded by the gf.loader as the argument.\nThe loader knows to load all textures and other resources when loading a world TMX\nfile, and this expets that to already be done.",
            "extends": "Map",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game the map is in",
                    "type": "Game"
                },
                {
                    "name": "position",
                    "description": "The starting position of the map",
                    "type": "Point|Vector|Array|Number"
                },
                {
                    "name": "map",
                    "description": "All the settings for the map",
                    "type": "Object"
                }
            ]
        },
        "TiledObjectGroup": {
            "name": "TiledObjectGroup",
            "shortname": "TiledObjectGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 1,
            "description": "Tiled object group is a special layer that contains entities\nTODO: This is all trash",
            "extends": "Layer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "group",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "TiledTileset": {
            "name": "TiledTileset",
            "shortname": "TiledTileset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 1,
            "description": "This object represents a tileset used by a TiledMap.\nThere can be multiple Tilesets in a map",
            "extends": "Texture",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "All the settings for the tileset",
                    "type": "Object"
                }
            ]
        },
        "ImageLayer": {
            "name": "ImageLayer",
            "shortname": "ImageLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\ImageLayer.js",
            "line": 1,
            "description": "ImageLayer is a layer represented by a single image",
            "extends": "Layer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game the layer is in",
                    "type": "Game"
                },
                {
                    "name": "position",
                    "description": "The starting position of the layer",
                    "type": "Point|Vector|Array|Number"
                },
                {
                    "name": "layer",
                    "description": "All the settings for the layer, or the texture to use",
                    "type": "Object|Texture"
                }
            ]
        },
        "Layer": {
            "name": "Layer",
            "shortname": "Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\Layer.js",
            "line": 1,
            "description": "Base Layer implementation, provides common functions for all Layer types",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "layer",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "Map": {
            "name": "Map",
            "shortname": "Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\Map.js",
            "line": 1,
            "description": "Base Map implementation, provides common functions for all Map types",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "All the settings for the map",
                    "type": "Object"
                }
            ]
        },
        "Tile": {
            "name": "Tile",
            "shortname": "Tile",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\Tile.js",
            "line": 1,
            "description": "Base Tile implementation, a tile is a single tile in a tilemap layer",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "tile",
                    "description": "All the settings for the tile",
                    "type": "Object"
                }
            ]
        },
        "SpritePool": {
            "name": "SpritePool",
            "shortname": "SpritePool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\pool\\SpritePool.js",
            "line": 1,
            "description": "Holds a pool of different Sprites that can be created, makes it very\neasy to quickly create different registered entities"
        },
        "Clock": {
            "name": "Clock",
            "shortname": "Clock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\Clock.js",
            "line": 1,
            "description": "High performance clock, from mrdoob's Three.js\nhttps://github.com/mrdoob/three.js/blob/master/src/core/Clock.js",
            "is_constructor": 1,
            "params": [
                {
                    "name": "autoStart",
                    "description": "Automatically start the counter or not",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n     var clock = new gf.Clock(false);\n     //... some code ...\n     clock.start();\n     //... some long code ...\n     var delta = clock.getDelta();"
            ]
        },
        "Vector": {
            "name": "Vector",
            "shortname": "Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\Vector.js",
            "line": 1,
            "description": "A 2d Vector implementation stolen directly from mrdoob's THREE.js\nthanks mrdoob: https://github.com/mrdoob/three.js/blob/master/src/math/Vector2.js",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ]
        },
        "math": {
            "name": "math",
            "shortname": "math",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\math.js",
            "line": 1,
            "description": "The grapefruit math library, used to abstract commonly used math operations"
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\utils.js",
            "line": 1,
            "description": "The grapefruit utility object, used for misc functions used throughout the code base"
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 37,
            "description": "Point object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Point.html\">PIXI.Point</a>"
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 44,
            "description": "Rectangle object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Rectangle.html\">PIXI.Rectangle</a>"
        },
        "Circle": {
            "name": "Circle",
            "shortname": "Circle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 51,
            "description": "Circle object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Circle.html\">PIXI.Circle</a>"
        },
        "Ellipse": {
            "name": "Ellipse",
            "shortname": "Ellipse",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 58,
            "description": "Ellipse object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Ellipse.html\">PIXI.Ellipse</a>"
        },
        "Polygon": {
            "name": "Polygon",
            "shortname": "Polygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 65,
            "description": "Polygon object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Polygon.html\">PIXI.Polygon</a>"
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 72,
            "description": "Texture object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Texture.html\">PIXI.Texture</a>"
        },
        "support": {
            "name": "support",
            "shortname": "support",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 95,
            "description": "Feature detection so we cans witch between renderers, play audio correctly, and other things."
        },
        "plugin": {
            "name": "plugin",
            "shortname": "plugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\plugin.js",
            "line": 2,
            "description": "Namespace for all plugins, it also provides methods for patching\ncore functions, and registering plugins."
        }
    },
    "classitems": [
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 13,
            "description": "Whether the player is muted or not",
            "itemtype": "property",
            "name": "muted",
            "type": "Boolean",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 23,
            "description": "The master volume of the player",
            "itemtype": "property",
            "name": "_volume",
            "type": "Number",
            "default": "1",
            "access": "private",
            "tagname": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 33,
            "description": "The Web Audio API context if we are using it",
            "itemtype": "property",
            "name": "ctx",
            "type": "AudioContext",
            "readonly": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 42,
            "description": "If we have some way of playing audio",
            "itemtype": "property",
            "name": "canPlay",
            "type": "Boolean",
            "readonly": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioManager.js",
            "line": 51,
            "description": "The codecs that the browser supports",
            "itemtype": "property",
            "name": "codecs",
            "type": "Object<Boolean>",
            "readonly": "",
            "class": "AudioManager"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 48,
            "description": "Load the audio file for this player",
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 101,
            "description": "Play a sound from the current time (0 by default).",
            "params": [
                {
                    "name": "sprite",
                    "description": "(optional) Plays from the specified position in the sound sprite definition.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "(optional) Returns the unique playback id for this sound instance.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 238,
            "description": "Pause playback and save the current position.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                },
                {
                    "name": "timerId",
                    "description": "(optional) Clear the correct timeout ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 289,
            "description": "Stop playback and reset to start.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                },
                {
                    "name": "timerId",
                    "description": "(optional) Clear the correct timeout ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 334,
            "description": "Mute this sound.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 343,
            "description": "Unmute this sound.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 352,
            "description": "Set the muted state of this sound.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 381,
            "description": "Set the position of playback.",
            "params": [
                {
                    "name": "pos",
                    "description": "The position to move current playback to.",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 416,
            "description": "Get the position of playback.",
            "params": [
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 445,
            "description": "Fade a currently playing sound between two volumes.",
            "params": [
                {
                    "name": "from",
                    "description": "The volume to fade from (0.0 to 1.0).",
                    "type": "Number"
                },
                {
                    "name": "to",
                    "description": "The volume to fade to (0.0 to 1.0).",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "Time in milliseconds to fade.",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "(optional) Fired when the fade is complete.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 520,
            "description": "Set the 3D position of the audio source.\nThe most common usage is to set the 'x' position\nto affect the left/right ear panning. Setting any value higher than\n1.0 will begin to decrease the volume of the sound as it moves further away.\nNOTE: This only works with Web Audio API, HTML5 Audio playback\nwill not be affected.",
            "params": [
                {
                    "name": "x",
                    "description": "The x-position of the playback from -1000.0 to 1000.0",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y-position of the playback from -1000.0 to 1000.0",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "The z-position of the playback from -1000.0 to 1000.0",
                    "type": "Number"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 575,
            "description": "Get an audio node by ID.",
            "return": {
                "description": "Audio node.",
                "type": "AudioPlayer"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 593,
            "description": "Get the first active audio node.",
            "return": {
                "description": "Audio node.",
                "type": "Howl"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 614,
            "description": "Get the first inactive audio node.\nIf there is none, create a new one and add it to the pool.",
            "params": [
                {
                    "name": "callback",
                    "description": "Function to call when the audio node is ready.",
                    "type": "Function"
                }
            ],
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 648,
            "description": "If there are more than 5 inactive audio nodes in the pool, clear out the rest.",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 673,
            "description": "Clear 'onend' timeout before it ends.",
            "params": [
                {
                    "name": "timerId",
                    "description": "The ID of the sound to be cancelled.",
                    "type": "Number"
                }
            ],
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 688,
            "description": "Setup the gain node and panner for a Web Audio instance.",
            "return": {
                "description": "The new audio node.",
                "type": "Object"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 715,
            "description": "Buffer a sound from URL (or from cache) and decode to audio source (Web Audio API).",
            "params": [
                {
                    "name": "url",
                    "description": "The path to the sound file.",
                    "type": "String"
                }
            ],
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 755,
            "description": "Finishes loading the Web Audio API sound and fires the loaded event",
            "params": [
                {
                    "name": "buffer",
                    "description": "The decoded buffer sound source.",
                    "type": "Object"
                }
            ],
            "class": "AudoPlayer"
        },
        {
            "file": "src\\audio\\AudioPlayer.js",
            "line": 782,
            "description": "Load the sound back into the buffer source.",
            "params": [
                {
                    "name": "loop",
                    "description": "Loop boolean, pos, and duration.",
                    "type": "Array"
                },
                {
                    "name": "id",
                    "description": "(optional) The play instance ID.",
                    "type": "String"
                }
            ],
            "class": "AudoPlayer"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 14,
            "description": "The bounds of that the camera can move to",
            "itemtype": "property",
            "name": "bounds",
            "type": "Rectangle",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 24,
            "description": "When following a sprite this is the space within the camera that it can move around\nbefore the camera moves to track it.",
            "itemtype": "property",
            "name": "_deadzone",
            "type": "Rectangle",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 35,
            "description": "The target that the camera will follow",
            "itemtype": "property",
            "name": "_target",
            "type": "Sprite",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 45,
            "description": "The size of the camera",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 54,
            "description": "Half of the size of the camera",
            "itemtype": "property",
            "name": "hSize",
            "type": "Vector",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 63,
            "description": "The _fx namespace has all the instance variables for all the fx",
            "itemtype": "property",
            "name": "_fx",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 93,
            "description": "Makes the camera flash with a certain color",
            "itemtype": "method",
            "name": "flash",
            "params": [
                {
                    "name": "color",
                    "description": "The color to flash the screen with",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "The time in milliseconds to fade away",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the flash has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 133,
            "description": "Stops a running flash, instantly hiding it",
            "itemtype": "method",
            "name": "stopFlash",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 144,
            "description": "Makes the camera fade into a color",
            "itemtype": "method",
            "name": "fade",
            "params": [
                {
                    "name": "color",
                    "description": "The color to fade into",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "The time in milliseconds to take to fade in",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the fade has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 184,
            "description": "Stops a running fade, instantly hiding it",
            "itemtype": "method",
            "name": "stopFade",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 195,
            "description": "Shakes the camera around a bit, to show it who is boss.",
            "itemtype": "method",
            "name": "shake",
            "params": [
                {
                    "name": "intensity",
                    "description": "How hard to shake around",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "The time in milliseconds to shake for",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "The axes to shake the camera in default is gf.Camera.SHAKE.BOTH",
                    "type": "Camera.SHAKE"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the shaking has stopped",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 242,
            "description": "Stops a running shake effect",
            "itemtype": "method",
            "name": "stopShake",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 257,
            "description": "Stops all currently running effects (flash, fade, shake)",
            "itemtype": "method",
            "name": "stopAll",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 270,
            "description": "Follows an sprite with the camera, ensuring they are always center view. You can\npass a follow style to change the area an sprite can move around in before we start\nto move with them.",
            "itemtype": "method",
            "name": "follow",
            "params": [
                {
                    "name": "sprite",
                    "description": "The sprite to follow",
                    "type": "Sprite"
                },
                {
                    "name": "style",
                    "description": "The style of following, defaults to gf.Camera.FOLLOW.LOCKON",
                    "type": "Camera.FOLLOW"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 326,
            "description": "Stops following any sprites",
            "itemtype": "method",
            "name": "unfollow",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 336,
            "description": "Focuses the camera on an x,y position. Ensures that the camera does\nnot go outside the bounds set with setBounds()",
            "itemtype": "method",
            "name": "focus",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord to focus on, if a Point is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y coord to focus on",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 365,
            "description": "Pans the camera around by the x,y amount. Ensures that the camera does\nnot go outside the bounds set with setBounds()",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Point is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 409,
            "description": "Resizes the viewing area, this is called internally by your game instance\nwhen you call mygame.resize(). DO NOT CALL THIS DIRECTLY",
            "itemtype": "method",
            "name": "resize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "w",
                    "description": "The new width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The new height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 428,
            "description": "Sets the bounds the camera is allowed to go. Usually this is the world's\nmin and max, and is set for you.",
            "itemtype": "method",
            "name": "setBounds",
            "params": [
                {
                    "name": "x",
                    "description": "The minimum x coord (usually 0)",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The minimum y coord (usually 0)",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The maximum x coord (usually map width)",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The maximum y coord (usually map height)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\Camera.js",
            "line": 453,
            "description": "Called internally every frame. Updates all effects and the follow",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 18,
            "description": "[read-only] The of children of this object.",
            "itemtype": "property",
            "name": "children",
            "type": "Array",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 23,
            "description": "The coordinate of the object relative to the local coordinates of the parent.",
            "itemtype": "property",
            "name": "position",
            "type": "Point",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 29,
            "description": "The scale factor of the object.",
            "itemtype": "property",
            "name": "scale",
            "type": "Point",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 35,
            "description": "The rotation of the object in radians.",
            "itemtype": "property",
            "name": "rotation",
            "type": "Number",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 41,
            "description": "The opacity of the object.",
            "itemtype": "property",
            "name": "alpha",
            "type": "Number",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 47,
            "description": "The visibility of the object.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 53,
            "description": "[read-only] The display object that contains this display object.",
            "itemtype": "property",
            "name": "parent",
            "type": "DisplayObject",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 59,
            "description": "[read-only] The stage the display object is connected to, or undefined if it is not connected to the stage.",
            "itemtype": "property",
            "name": "stage",
            "type": "Stage",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 65,
            "description": "This is the defined area that will pick up mouse / touch events. It is null by default.\nSetting it is a neat way of optimising the hitTest function that the interactionManager will use (as it will not need to hit test all the children)",
            "itemtype": "property",
            "name": "hitArea",
            "type": "Rectangle",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 76,
            "description": "A callback that is used when the users clicks on the displayObject with their mouse",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 82,
            "description": "A callback that is used when the user clicks the mouse down over the sprite",
            "itemtype": "method",
            "name": "mousedown",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 88,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject\nfor this callback to be fired the mouse must have been pressed down over the displayObject",
            "itemtype": "method",
            "name": "mouseup",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 95,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject but is no longer over the displayObject\nfor this callback to be fired, The touch must have started over the displayObject",
            "itemtype": "method",
            "name": "mouseupoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 102,
            "description": "A callback that is used when the users mouse rolls over the displayObject",
            "itemtype": "method",
            "name": "mouseover",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 108,
            "description": "A callback that is used when the users mouse leaves the displayObject",
            "itemtype": "method",
            "name": "mouseout",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 118,
            "description": "A callback that is used when the users taps on the sprite with their finger\nbasically a touch version of click",
            "itemtype": "method",
            "name": "tap",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 125,
            "description": "A callback that is used when the user touch's over the displayObject",
            "itemtype": "method",
            "name": "touchstart",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 131,
            "description": "A callback that is used when the user releases a touch over the displayObject",
            "itemtype": "method",
            "name": "touchend",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 137,
            "description": "A callback that is used when the user releases the touch that was over the displayObject\nfor this callback to be fired, The touch must have started over the sprite",
            "itemtype": "method",
            "name": "touchendoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 144,
            "description": "Inherited Methods",
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 148,
            "description": "Indicates if the sprite will have touch and mouse interactivity. It is false by default",
            "itemtype": "method",
            "name": "setInteractive",
            "params": [
                {
                    "name": "interactive",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 154,
            "description": "Adds a child to the object.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 160,
            "description": "Adds a child to the object at a specified index. If the index is out of bounds an error will be thrown",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 167,
            "description": "Removes a child from the object.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\DisplayObjectContainer.js",
            "line": 183,
            "description": "Convenience method for setting the position of the Object.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "X coord to put the object at.\n      If an Array, Vector, or Point is passed then the y parameter is ignored",
                    "type": "Number|Array<Number>|Vector|Point"
                },
                {
                    "name": "y",
                    "description": "Y coord to put the object at",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "DisplayObjectContainer"
            },
            "example": [
                "\n     obj.setPosition(0) //will set to (0, 0)\n         .setPosition(1, 1)\n         .setPosition([5, 5])\n         .setPosition(new gf.Point(10, 10))\n         .setPosition(new gf.Vector(20, 20));"
            ],
            "class": "DisplayObjectContainer"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 17,
            "description": "The type of the sprite",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'neutral'",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 26,
            "description": "Whether or not the sprite is \"alive\", advisory only",
            "itemtype": "property",
            "name": "alive",
            "type": "Boolean",
            "default": "true",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 35,
            "description": "The mass of this sprite (if using physics)",
            "itemtype": "property",
            "name": "mass",
            "type": "Number",
            "default": "0",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 44,
            "description": "The physics system that this sprite is a part of. This is advisory only\nplease use enablePhysics() or disablePhysics() and do not set this value\ndirectly.",
            "itemtype": "property",
            "name": "physics",
            "type": "PhysicsSystem",
            "default": "null",
            "readonly": "",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 106,
            "description": "On Collision Event\n     called when this sprite collides into another, or is being collided into by another.\n     By default if something collides with a collectable sprite we remove the collectable\n     and if we collide with a solid tile we kill our velocity",
            "itemtype": "method",
            "name": "onCollision",
            "params": [
                {
                    "name": "obj",
                    "description": "Colliding sprite",
                    "type": "Sprite"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 123,
            "description": "Sprite types",
            "itemtype": "property",
            "name": "TYPE",
            "type": "Object",
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 149,
            "description": "A callback that is used when the users clicks on the sprite with their mouse",
            "itemtype": "event",
            "name": "click",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 155,
            "description": "A callback that is used when the user clicks the mouse down over the sprite",
            "itemtype": "event",
            "name": "mousedown",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 161,
            "description": "A callback that is used when the user releases the mouse that was over the sprite\nfor this callback to be fired the mouse must have been pressed down over the sprite",
            "itemtype": "event",
            "name": "mouseup",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 168,
            "description": "A callback that is used when the user releases the mouse that was over the sprite but is no longer over the sprite\nfor this callback to be fired, The touch must have started over the sprite",
            "itemtype": "event",
            "name": "mouseupoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 175,
            "description": "A callback that is used when the users mouse rolls over the sprite",
            "itemtype": "event",
            "name": "mouseover",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 181,
            "description": "A callback that is used when the users mouse leaves the sprite",
            "itemtype": "event",
            "name": "mouseout",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 187,
            "description": "A callback that is used when the user moves the mouse while over the sprite",
            "itemtype": "event",
            "name": "mousemove",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 198,
            "description": "A callback that is used when the users taps on the sprite with their finger\nbasically a touch version of click",
            "itemtype": "event",
            "name": "tap",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 205,
            "description": "A callback that is used when the user touch's over the displayObject",
            "itemtype": "event",
            "name": "touchstart",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 211,
            "description": "A callback that is used when the user releases a touch over the displayObject",
            "itemtype": "event",
            "name": "touchend",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\display\\Sprite.js",
            "line": 217,
            "description": "A callback that is used when the user releases the touch that was over the displayObject\nfor this callback to be fired, The touch must have started over the sprite",
            "itemtype": "event",
            "name": "touchendoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 13,
            "description": "The domElement that we are putting our rendering canvas into (the container)",
            "itemtype": "property",
            "name": "container",
            "type": "DOMELement",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 28,
            "description": "The method used to render values to the screen (either webgl, or canvas)",
            "itemtype": "property",
            "name": "renderMethod",
            "type": "String",
            "default": "'webgl'",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 37,
            "description": "The player entities added into the game",
            "itemtype": "property",
            "name": "players",
            "type": "{Array}",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 45,
            "description": "Raw PIXI.stage instance",
            "itemtype": "property",
            "name": "stage",
            "type": "PIXI.Stage",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 57,
            "description": "Raw Clock instance for internal timing",
            "itemtype": "property",
            "name": "clock",
            "type": "Clock",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 66,
            "description": "Raw rendering engine",
            "itemtype": "property",
            "name": "renderer",
            "type": "PIXI.WebGLRenderer|PIXI.CanvasRenderer",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 98,
            "description": "Maximum Z value",
            "itemtype": "property",
            "name": "MAX_Z",
            "type": "{Number}",
            "default": "500",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 109,
            "description": "The loader for this game instance",
            "itemtype": "property",
            "name": "loader",
            "type": "AssetLoader",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 118,
            "description": "The sprite pool to use to create registered entities",
            "itemtype": "property",
            "name": "spritepool",
            "type": "SpritePool",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 127,
            "description": "The GameStates added to the game",
            "itemtype": "property",
            "name": "states",
            "type": "Array",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 136,
            "description": "The currently active GameState",
            "itemtype": "property",
            "name": "activeState",
            "type": "GameState",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 167,
            "description": "The audio player for this game instance\n(refers to the active GameState's audio instance)",
            "itemtype": "property",
            "name": "audio",
            "type": "AudioPlayer",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 176,
            "description": "The input instance for this game\n(refers to the active GameState's input instance)",
            "itemtype": "property",
            "name": "input",
            "type": "InputManager",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 185,
            "description": "The physics system to simulate stuffs\n(refers to the active GameState's physics instance)",
            "itemtype": "property",
            "name": "physics",
            "type": "PhysicsSystem",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 194,
            "description": "The camera you view the scene through\n(refers to the active GameState's camera instance)",
            "itemtype": "property",
            "name": "camera",
            "type": "Camera",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 203,
            "description": "The world instance that holds all sprites and the map\n(refers to the active GameState's world instance)",
            "itemtype": "property",
            "name": "world",
            "type": "Map",
            "readonly": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 214,
            "description": "Allows you to resize the game area",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "Width to resize to",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height to resize to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 234,
            "description": "Adds an object to the current stage",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "obj",
                    "description": "The sprite to the stage",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 246,
            "description": "Removes a sprite from the stage",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "obj",
                    "description": "The sprite to the stage",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 306,
            "description": "Loads the world map into the game",
            "itemtype": "method",
            "name": "loadWorld",
            "params": [
                {
                    "name": "world",
                    "description": "The map to load as the current world",
                    "type": "String|Map"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 318,
            "description": "Begins the render loop",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "Game"
        },
        {
            "file": "src\\game\\Game.js",
            "line": 330,
            "description": "The looping render tick",
            "itemtype": "method",
            "name": "_tick",
            "access": "private",
            "tagname": "",
            "class": "Game"
        },
        {
            "file": "src\\game\\GameState.js",
            "line": 23,
            "description": "The name of this game state",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "GameState"
        },
        {
            "file": "src\\game\\GameState.js",
            "line": 31,
            "description": "The audio player for this game instance",
            "itemtype": "property",
            "name": "audio",
            "type": "AudioPlayer",
            "readonly": "",
            "class": "GameState"
        },
        {
            "file": "src\\game\\GameState.js",
            "line": 40,
            "description": "The physics system to simulate stuffs",
            "itemtype": "property",
            "name": "physics",
            "type": "PhysicsSystem",
            "readonly": "",
            "class": "GameState"
        },
        {
            "file": "src\\game\\GameState.js",
            "line": 49,
            "description": "The input instance for this game",
            "itemtype": "property",
            "name": "input",
            "type": "InputManager",
            "readonly": "",
            "class": "GameState"
        },
        {
            "file": "src\\game\\GameState.js",
            "line": 58,
            "description": "The camera you view the scene through",
            "itemtype": "property",
            "name": "camera",
            "type": "Camera",
            "readonly": "",
            "class": "GameState"
        },
        {
            "file": "src\\game\\GameState.js",
            "line": 67,
            "description": "The world instance that holds all entites and the map",
            "itemtype": "property",
            "name": "world",
            "type": "Map",
            "readonly": "",
            "class": "GameState"
        },
        {
            "file": "src\\game\\GameState.js",
            "line": 76,
            "description": "The game instance that this state belongs too",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "GameState"
        },
        {
            "file": "src\\gui\\Gui.js",
            "line": 9,
            "description": "The name of the Gui",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Gui"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 10,
            "description": "Sets whether or not you can drag the GuiItem around",
            "itemtype": "property",
            "name": "draggable",
            "type": "Boolean",
            "default": "false",
            "class": "GuiItem"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 19,
            "description": "[read only] Describes if the current item is being dragged or not, if it is this\nobject will hold the last local position of the mouse (relative to this object's parent)",
            "itemtype": "property",
            "name": "dragging",
            "type": "Object",
            "default": "false",
            "readonly": "",
            "class": "GuiItem"
        },
        {
            "file": "src\\input\\GamepadButtons.js",
            "line": 4,
            "description": "The threshold at which we consider a button \"pressed\"",
            "itemtype": "property",
            "name": "threshold",
            "type": "Number",
            "default": "0.4",
            "class": "Input"
        },
        {
            "file": "src\\input\\GamepadSticks.js",
            "line": 4,
            "description": "The threshold at which we consider a stick \"moved\"",
            "itemtype": "property",
            "name": "threshold",
            "type": "Number",
            "default": "0.5",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 1,
            "description": "input object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 5,
            "description": "Bindable keycodes",
            "itemtype": "property",
            "name": "KEY",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 90,
            "description": "Bindable Mouse Events",
            "itemtype": "property",
            "name": "MOUSE",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 106,
            "description": "Bindable Touch Events",
            "itemtype": "property",
            "name": "TOUCH",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 122,
            "description": "Bindable Gamepad Buttons",
            "itemtype": "property",
            "name": "GP_BUTTON",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 155,
            "description": "Bindable Gamepad Axes",
            "itemtype": "property",
            "name": "GP_AXIS",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 187,
            "description": "The dom element to bind events to",
            "itemtype": "property",
            "name": "view",
            "type": "Game",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 195,
            "description": "The binds that map an action to an input value",
            "itemtype": "property",
            "name": "binds",
            "type": "Object",
            "readonly": "",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 204,
            "description": "The callbacks that map from an action",
            "itemtype": "property",
            "name": "callbacks",
            "type": "Object",
            "readonly": "",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 213,
            "description": "The count of how many actions an input value is bound to",
            "itemtype": "property",
            "name": "callbacks",
            "type": "Object",
            "readonly": "",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 222,
            "description": "Tracks the status of each action",
            "itemtype": "property",
            "name": "status",
            "type": "Object",
            "readonly": "",
            "class": "Input"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 2,
            "description": "The dom element to bind events to",
            "itemtype": "property",
            "name": "view",
            "type": "Game",
            "class": "AssetLoader"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 4,
            "description": "Tracks if a key is already down, so we don't repeat",
            "itemtype": "property",
            "name": "keydown",
            "type": "Object",
            "readonly": "",
            "class": "AssetLoader"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 13,
            "description": "The current sequence of keys that have been pressed",
            "itemtype": "property",
            "name": "sequence",
            "type": "Array<Number>",
            "readonly": "",
            "class": "AssetLoader"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 22,
            "description": "The amount of time it takes for the sequence to clear out, in ms",
            "itemtype": "property",
            "name": "sequenceTimeout",
            "type": "Number",
            "default": "500",
            "class": "AssetLoader"
        },
        {
            "file": "src\\input\\Mouse.js",
            "line": 4,
            "description": "The current screen touches",
            "itemtype": "property",
            "name": "touches",
            "type": "Array",
            "readonly": "",
            "class": "AssetLoader"
        },
        {
            "file": "src\\input\\Mouse.js",
            "line": 13,
            "description": "The current position of the mouse",
            "itemtype": "property",
            "name": "position",
            "type": "Point",
            "readonly": "",
            "class": "AssetLoader"
        },
        {
            "file": "src\\input\\Mouse.js",
            "line": 22,
            "description": "The current position of the mouse",
            "itemtype": "property",
            "name": "position",
            "type": "Point",
            "readonly": "",
            "class": "AssetLoader"
        },
        {
            "file": "src\\loader\\AssetLoader.js",
            "line": 20,
            "description": "The array of assets to load",
            "itemtype": "property",
            "name": "assets",
            "type": "Array",
            "class": "AssetLoader"
        },
        {
            "file": "src\\loader\\AssetLoader.js",
            "line": 28,
            "description": "The count of remaining assets to load",
            "itemtype": "property",
            "name": "remaining",
            "type": "Number",
            "readonly": "",
            "class": "AssetLoader"
        },
        {
            "file": "src\\loader\\AssetLoader.js",
            "line": 37,
            "description": "A mapping of extensions to types",
            "itemtype": "property",
            "name": "loaders",
            "type": "Object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "AssetLoader"
        },
        {
            "file": "src\\loader\\AssetLoader.js",
            "line": 62,
            "description": "Fired when an item has loaded",
            "itemtype": "event",
            "name": "onProgress",
            "class": "AssetLoader"
        },
        {
            "file": "src\\loader\\AssetLoader.js",
            "line": 68,
            "description": "Fired when all the assets have loaded",
            "itemtype": "event",
            "name": "onComplete",
            "class": "AssetLoader"
        },
        {
            "file": "src\\loader\\AssetLoader.js",
            "line": 75,
            "description": "Adds a resource to the assets array.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the resource (to use as the key in the cache)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL to load the resource from (cross-domain not supported yet)",
                    "type": "String"
                }
            ],
            "class": "AssetLoader"
        },
        {
            "file": "src\\loader\\AssetLoader.js",
            "line": 88,
            "description": "Starts the loading festivities. If called without any arguments it will load\nthe assets passed in at the ctor. If an array of assets are passed it will\nload those instead.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "items",
                    "description": "Array of resources to load instead of the object's resources",
                    "type": "Array"
                }
            ],
            "class": "AssetLoader"
        },
        {
            "file": "src\\loader\\AssetLoader.js",
            "line": 116,
            "description": "Called whenever an asset is loaded, to keep track of when to emit complete and progress.",
            "itemtype": "method",
            "name": "onAssetLoaded",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "err",
                    "description": "An option error if there was an issue loading that resource",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The type of asset loaded (texture, audio, world, or spritesheet)",
                    "type": "String"
                },
                {
                    "name": "asset",
                    "description": "The actual asset that was loaded",
                    "type": "Texture|Audio|Object"
                }
            ],
            "class": "AssetLoader"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 16,
            "description": "The tile IDs of the tilemap",
            "itemtype": "property",
            "name": "name",
            "type": "Uint32Array",
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 24,
            "description": "The current map of all tiles on the screen",
            "itemtype": "property",
            "name": "tiles",
            "type": "Object",
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 32,
            "description": "The user-defined properties of this group. Usually defined in the TiledEditor",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 53,
            "description": "Creates all the tile sprites needed to display the layer",
            "itemtype": "method",
            "name": "renderTiles",
            "params": [
                {
                    "name": "startX",
                    "description": "The starting x tile position",
                    "type": "Number"
                },
                {
                    "name": "startY",
                    "description": "The starting y tile position",
                    "type": "Number"
                },
                {
                    "name": "numX",
                    "description": "The number of tiles in the X direction to render",
                    "type": "Number"
                },
                {
                    "name": "numY",
                    "description": "The number of tiles in the Y direction to render",
                    "type": "Number"
                }
            ],
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 95,
            "description": "Clears all the tiles currently used to render the layer",
            "itemtype": "method",
            "name": "clearTiles",
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 121,
            "description": "Moves a tile sprite from one position to another, and creates a new tile\nif the old position didn't have a sprite",
            "itemtype": "method",
            "name": "moveTileSprite",
            "params": [
                {
                    "name": "fromTileX",
                    "description": "The x coord of the tile in units of tiles (not pixels) to move from",
                    "type": "Number"
                },
                {
                    "name": "fromTileY",
                    "description": "The y coord of the tile in units of tiles (not pixels) to move from",
                    "type": "Number"
                },
                {
                    "name": "toTileX",
                    "description": "The x coord of the tile in units of tiles (not pixels) to move to",
                    "type": "Number"
                },
                {
                    "name": "toTileY",
                    "description": "The y coord of the tile in units of tiles (not pixels) to move to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The sprite to display",
                "type": "PIXI.Sprite"
            },
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 256,
            "description": "Pans the layer around, rendering stuff if necessary",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "The x amount to pan, if a Point is passed the dy param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "dy",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Layer"
            },
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 18,
            "description": "The user-defined properties",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "default": "{}",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 29,
            "description": "The tile size",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Vector",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 40,
            "description": "The orientation of the map",
            "itemtype": "property",
            "name": "orientation",
            "type": "String",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 48,
            "description": "The version of the TMX format",
            "itemtype": "property",
            "name": "version",
            "type": "Number",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 56,
            "description": "The background color of the map (since Tiled 0.9.0)",
            "itemtype": "property",
            "name": "backgroundColor",
            "type": "Number",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 66,
            "description": "The tilesets used by this map",
            "itemtype": "property",
            "name": "tilesets",
            "type": "Array",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 74,
            "description": "The scaled tile size",
            "itemtype": "property",
            "name": "scaledTileSize",
            "type": "Vector",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 85,
            "description": "The real size (size * scaledTileSize)",
            "itemtype": "property",
            "name": "realSize",
            "type": "Vector",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 129,
            "description": "Gets the tileset that an ID is associated with",
            "itemtype": "method",
            "name": "getTileset",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to find the tileset for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "TiledTileset"
            },
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 141,
            "description": "Notifies the map it needs to resize, re renders the viewport",
            "itemtype": "method",
            "name": "resize",
            "access": "private",
            "tagname": "",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 13,
            "description": "The color to display objects in this group",
            "itemtype": "property",
            "name": "color",
            "type": "",
            "class": "TiledObjectGroup"
        },
        {
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 21,
            "description": "The user-defined properties of this group. Usually defined in the TiledEditor",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "TiledObjectGroup"
        },
        {
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 29,
            "description": "The objects in this group that can be spawned",
            "itemtype": "property",
            "name": "objects",
            "type": "Array",
            "class": "TiledObjectGroup"
        },
        {
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 43,
            "description": "Spawns all the entities associated with this layer, and properly sets their attributes",
            "itemtype": "method",
            "name": "spawn",
            "return": {
                "description": "Returns itself for chainability",
                "type": "TiledObjectGroup"
            },
            "class": "TiledObjectGroup"
        },
        {
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 222,
            "description": "Despawns all the sprites associated with this layer",
            "itemtype": "method",
            "name": "despawn",
            "return": {
                "description": "Returns itself for chainability",
                "type": "TiledObjectGroup"
            },
            "class": "TiledObjectGroup"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 22,
            "description": "The first tileId in the tileset",
            "itemtype": "property",
            "name": "firstgid",
            "type": "Number",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 30,
            "description": "The name of the tileset",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 38,
            "description": "The size of a tile in the tileset",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Vector",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 46,
            "description": "The spacing around a tile in the tileset",
            "itemtype": "property",
            "name": "spacing",
            "type": "Number",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 54,
            "description": "The margin around a tile in the tileset",
            "itemtype": "property",
            "name": "margin",
            "type": "Number",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 62,
            "description": "The offset of tile positions when rendered",
            "itemtype": "property",
            "name": "tileoffset",
            "type": "Number",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 78,
            "description": "The number of tiles calculated based on size, margin, and spacing",
            "itemtype": "property",
            "name": "numTiles",
            "type": "Vector",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 89,
            "description": "The last tileId in the tileset",
            "itemtype": "property",
            "name": "lastgid",
            "type": "Number",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 97,
            "description": "The properties of the tileset",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 105,
            "description": "The properties of the tiles in the tileset (like collision stuff)",
            "itemtype": "property",
            "name": "tileproperties",
            "type": "Object",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 113,
            "description": "The size of the tileset",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 121,
            "description": "The texture instances for each tile in the set",
            "itemtype": "property",
            "name": "textures",
            "type": "Array",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 195,
            "description": "Gets the tile properties for a tile based on it's ID",
            "itemtype": "method",
            "name": "getTileProperties",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to get the properties for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The properties of the tile",
                "type": "Object"
            },
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 220,
            "description": "Gets the tile texture for a tile based on it's ID",
            "itemtype": "method",
            "name": "getTileTexture",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to get the texture for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The texture for the tile",
                "type": "Texture"
            },
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 10,
            "description": "The name of the layer",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Layer"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 19,
            "description": "The size of the layer",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new gf.Vector(1, 1)",
            "class": "Layer"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 33,
            "description": "Pans the layer around, rendering stuff if necessary",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "The x amount to pan, if a Point is passed the dy param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "dy",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Layer"
            },
            "class": "Layer"
        },
        {
            "file": "src\\map\\Map.js",
            "line": 13,
            "description": "The size of the map",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new gf.Vector(0, 0)",
            "class": "Map"
        },
        {
            "file": "src\\map\\Map.js",
            "line": 27,
            "description": "Pans the map around",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Point is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Map"
            },
            "class": "Map"
        },
        {
            "file": "src\\map\\Tile.js",
            "line": 19,
            "description": "On Collision Event\n     called when this sprite collides into another, or is being collided into by another.\n     By default if something collides with a collectable sprite we remove the collectable\n     and if we collide with a solid tile we kill our velocity",
            "itemtype": "method",
            "name": "onCollision",
            "params": [
                {
                    "name": "obj",
                    "description": "Colliding sprite",
                    "type": "Sprite"
                }
            ],
            "class": "Tile"
        },
        {
            "file": "src\\map\\Tile.js",
            "line": 41,
            "description": "Tile collision types",
            "itemtype": "property",
            "name": "COLLISION",
            "type": "Object",
            "class": "Tile"
        },
        {
            "file": "src\\pool\\SpritePool.js",
            "line": 14,
            "description": "Adds an Sprite Type to the pool",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Sprite Type to add",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "The Sprite or decendant type to add to the pool",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns the passed sprite",
                "type": "Sprite"
            },
            "class": "SpritePool"
        },
        {
            "file": "src\\pool\\SpritePool.js",
            "line": 25,
            "description": "Checks if the Sprite Type exists in the pool",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Sprite Type to check if is in the pool",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "SpritePool"
        },
        {
            "file": "src\\pool\\SpritePool.js",
            "line": 35,
            "description": "Creates a new sprite from the pool",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Sprite to check if is in the pool",
                    "type": "String"
                },
                {
                    "name": "texture",
                    "description": "The texture for the sprite",
                    "type": "Texture"
                },
                {
                    "name": "props",
                    "description": "Extra object that will be passed along (for custom sprite options)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new instance of the object from the pool",
                "type": "Sprite"
            },
            "class": "SpritePool"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 26,
            "description": "Starts the timer",
            "itemtype": "method",
            "name": "start",
            "example": [
                "\n     clock.start();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 40,
            "description": "Stops the timer",
            "itemtype": "method",
            "name": "stop",
            "example": [
                "\n     clock.stop();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 51,
            "description": "Gets the total time that the timer has been running",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "Total ellapsed time in ms",
                "type": "Number"
            },
            "example": [
                "\n     clock.getElapsedTime();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 64,
            "description": "Gets the difference in time since getDelta() was called last",
            "itemtype": "method",
            "name": "getDelta",
            "return": {
                "description": "Ellapsed time since last call in seconds",
                "type": "Number"
            },
            "example": [
                "\n     clock.getDelta();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 16,
            "description": "Sets the value of the vector",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 30,
            "description": "Sets the X value of the vector",
            "itemtype": "method",
            "name": "setX",
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 42,
            "description": "Sets the Y value of the vector",
            "itemtype": "method",
            "name": "setY",
            "params": [
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 54,
            "description": "Sets a component value of the vector",
            "itemtype": "method",
            "name": "setComponent",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the component to set (0 = x, 1 = y)",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to set the component to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 71,
            "description": "Gets a component value of the vector",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the component to set (0 = x, 1 = y)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the component value",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 85,
            "description": "Copies the passed vector's components to this vector",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to copy the values from",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 98,
            "description": "Floors the vector components",
            "itemtype": "method",
            "name": "floor",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 110,
            "description": "Ceils the vector components",
            "itemtype": "method",
            "name": "ceil",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 122,
            "description": "Adds a vector to this one",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to add to this one",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 135,
            "description": "Adds two vectors to each other and stores the result in this vector",
            "itemtype": "method",
            "name": "addVectors",
            "params": [
                {
                    "name": "vector1",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "vector2",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 149,
            "description": "Adds a scalar value to the x and y components of this vector",
            "itemtype": "method",
            "name": "addScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The scalar value to add",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 162,
            "description": "Subtracts a vector from this one",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to subtract from this one",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 175,
            "description": "Subtracts two vectors from each other and stores the result in this vector",
            "itemtype": "method",
            "name": "subVectors",
            "params": [
                {
                    "name": "vector1",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "vector2",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 189,
            "description": "Multiplies the x and y components of this vector by a scalar value",
            "itemtype": "method",
            "name": "multiplyScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The value to multiply by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 202,
            "description": "Divides the x and y components of this vector by a scalar value",
            "itemtype": "method",
            "name": "divideScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The value to divide by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 219,
            "description": "Sets this vector components to the minimum value when compared to the passed vector's components",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 237,
            "description": "Sets this vector components to the maximum value when compared to the passed vector's components",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 255,
            "description": "Clamps the vectors components to be between min and max",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "min",
                    "description": "The minimum value a component can be",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value a component can be",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 280,
            "description": "Negates this vector (multiplies by -1)",
            "itemtype": "method",
            "name": "negate",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 289,
            "description": "Performs the dot product between this vector and the passed one and returns the result",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns the dot product",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 299,
            "description": "Calculates the square length of the vector",
            "itemtype": "method",
            "name": "lengthSq",
            "return": {
                "description": "Returns the square length of the vector",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 308,
            "description": "Calculates the length of the vector",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "Returns the length of the vector",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 317,
            "description": "Normalizes this vector (divides by its length)",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "Returns the normalized vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 326,
            "description": "Calculates the distance to the passed vector",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 336,
            "description": "Calculates the square distance to the passed vector",
            "itemtype": "method",
            "name": "distanceToSquared",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The square distance",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 347,
            "description": "Sets the length of the vector",
            "itemtype": "method",
            "name": "setLength",
            "params": [
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 363,
            "description": "Performs a linear interpolation between this vector and the passed vector",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 377,
            "description": "Checks if this vector is equal to another",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare with",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 387,
            "description": "Returns an array with the components of this vector as the elements",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "Returns an array of [x,y] form",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 396,
            "description": "Creates a new instance of Vector, with the same components as this vector",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Returns a new Vector with the same values",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 10,
            "description": "Quickly rounds a number. This is about twice as fast as Math.round()",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "num",
                    "description": "The number to round",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The rounded value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 20,
            "description": "Clamps a number between two values.",
            "itemtype": "method",
            "name": "clamp",
            "params": [
                {
                    "name": "num",
                    "description": "The number to clamp",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "The minimum value the number is allowed to be",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value the number is allowed to be",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The clamped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 32,
            "description": "Truncates the decimal from a number",
            "itemtype": "method",
            "name": "truncate",
            "params": [
                {
                    "name": "num",
                    "description": "The number to truncate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The truncated value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 42,
            "description": "Snaps a number to a grid value.\nFor example, if you have a grid with gaps the size of 10 horizontally, and\na position of 11, it would snap to 10; a position of 18 would snap to 20",
            "itemtype": "method",
            "name": "snap",
            "params": [
                {
                    "name": "num",
                    "description": "The number to snap",
                    "type": "Number"
                },
                {
                    "name": "gap",
                    "description": "The gap size of the grid (the tile size)",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting offset of a grid slice (aka tile)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The snapped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 61,
            "description": "Snaps a number to a grid value, using floor.\nFor example, if you have a grid with gaps the size of 10 horizontally, and\na position of 11, it would snap to 10; a position of 18 would also snap to 10",
            "itemtype": "method",
            "name": "snapFloor",
            "params": [
                {
                    "name": "num",
                    "description": "The number to snap",
                    "type": "Number"
                },
                {
                    "name": "gap",
                    "description": "The gap size of the grid (the tile size)",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting offset of a grid slice (aka tile)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The snapped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 80,
            "description": "Snaps a number to a grid value, using ceiling.\nFor example, if you have a grid with gaps the size of 10 horizontally, and\na position of 11, it would snap to 20; a position of 18 would also snap to 20",
            "itemtype": "method",
            "name": "snapCeil",
            "params": [
                {
                    "name": "num",
                    "description": "The number to snap",
                    "type": "Number"
                },
                {
                    "name": "gap",
                    "description": "The gap size of the grid (the tile size)",
                    "type": "Number"
                },
                {
                    "name": "offset",
                    "description": "The starting offset of a grid slice (aka tile)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The snapped value",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 99,
            "description": "Convert radians to degrees",
            "itemtype": "method",
            "name": "radiansToDegrees",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in radians to convert",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The angle in degrees",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 109,
            "description": "Convert radians to degrees",
            "itemtype": "method",
            "name": "degreesToRadians",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle in degrees to convert",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The angle in radians",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 119,
            "description": "Calculates the angle between two points",
            "itemtype": "method",
            "name": "angleBetween",
            "params": [
                {
                    "name": "pos1",
                    "description": "The first position",
                    "type": "Vector|Point"
                },
                {
                    "name": "pos2",
                    "description": "The second position",
                    "type": "Vector|Point"
                }
            ],
            "return": {
                "description": "The angle in radians",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 130,
            "description": "Returns a random boolean based on the provided chance. The chance represents the\npercentage chance of returning: true.",
            "itemtype": "method",
            "name": "randomBool",
            "params": [
                {
                    "name": "chance",
                    "description": "The % chance of getting true (0 - 100), defaults to 50%",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 160,
            "description": "Returns a random sign based on the provided chance. The chance represents the\npercentage chance of returning 1 (positive).",
            "itemtype": "method",
            "name": "randomSign",
            "params": [
                {
                    "name": "chance",
                    "description": "The % chance of getting true (0 - 100), defaults to 50%",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "either 1 or -1",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\math.js",
            "line": 171,
            "description": "Returns a random element of an array.",
            "itemtype": "method",
            "name": "randomElement",
            "params": [
                {
                    "name": "array",
                    "description": "The array to choose from",
                    "type": "Array"
                },
                {
                    "name": "start",
                    "description": "The index of the first element to include, defaults to 0",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "The number of elements from the start to include, defaults to the length of the array (minus the start index)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "either 1 or -1",
                "type": "Number"
            },
            "class": "math"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 8,
            "description": "Ensures that some input is a vector, converts strings and arrays into vector objects",
            "itemtype": "method",
            "name": "ensureVector",
            "params": [
                {
                    "name": "vec",
                    "description": "The object to ensure becomes a vector",
                    "type": "Array|String|Vector"
                }
            ],
            "return": {
                "description": "The vector created with the passed values, if the values can't be made\n     into a Vector, then a new Vector with 0,0 is returned",
                "type": "Vector"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 37,
            "description": "An empty function that performs no action",
            "itemtype": "method",
            "name": "noop",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 43,
            "description": "Performs an ajax request, and manages the callbacks passed in",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings of the ajax request, similar to jQuery's ajax function",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An XHR object",
                "type": "AjaxRequest"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 101,
            "description": "Wraps XMLHttpRequest in a cross-browser way.",
            "itemtype": "method",
            "name": "AjaxRequest",
            "return": {
                "description": "",
                "type": "ActiveXObject|XMLHttpRequest"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 131,
            "description": "This will take values and override the passed obj's properties with those values.\nThe difference from a normal object extend is that this will try to massage the passed\nvalue into the same type as the object's property. Also if the key for the value is not\nin the original object, it is not copied.",
            "itemtype": "method",
            "name": "setValues",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to extend the values into",
                    "type": "Object"
                },
                {
                    "name": "values",
                    "description": "The values to put into the object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the updated object",
                "type": "Object"
            },
            "example": [
                "\n     var obj = { vec: new gf.Vector(), arr: [] },\n         vals = { vec: '2|5', arr: '5|10|11' };\n     gf.setValues(obj, vals);\n     //now obj is:\n     // { vec: gf.Vector(2, 5), arr: [5, 10, 11] }\n     "
            ],
            "class": "utils"
        },
        {
            "file": "src\\core.js",
            "line": 1,
            "license": "GrapeFruit Game Engine\nCopyright (c) 2012, Chad Engler\n\nGrapeFruit is licensed under the MIT License.\nhttp://www.opensource.org/licenses/mit-license.php\n\nKnown Limiting Features:\n  - Canvas\n      - IE 9+\n      - FF 2+\n      - Chrome 4+\n      - Safari 3.1+\n      - Opera 9+\n\n  - WebGL\n      - IE 11+\n      - FF 4+\n      - Chrome 8+\n      - Safari 6+\n      - Opera 12+\n\n  - Object.create\n      - IE 9+\n      - FF 4+\n      - Chrome 7+\n      - Safari 5+\n      - Opera 12+",
            "class": "Point"
        },
        {
            "file": "src\\core.js",
            "line": 31,
            "description": "The base grapefruit object",
            "class": "Point"
        },
        {
            "file": "src\\core.js",
            "line": 79,
            "description": "The current grapefruit version",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "class": "Texture"
        },
        {
            "file": "src\\core.js",
            "line": 87,
            "description": "The cached assets loaded by any loader",
            "itemtype": "property",
            "name": "assetCache",
            "type": "Object",
            "class": "Texture"
        },
        {
            "file": "src\\core.js",
            "line": 101,
            "description": "The current user agent string",
            "itemtype": "property",
            "name": "ua",
            "type": "String",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 109,
            "description": "Whether or not canvas is supported",
            "itemtype": "property",
            "name": "canvas",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 117,
            "description": "Whether or not webgl is supported",
            "itemtype": "property",
            "name": "webgl",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 125,
            "description": "Whether or not web workers are supported",
            "itemtype": "property",
            "name": "workers",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 133,
            "description": "Whether or not Blob URLs are supported",
            "itemtype": "property",
            "name": "blobs",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 141,
            "description": "Whether or not typed arrays are supported",
            "itemtype": "property",
            "name": "typedArrays",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 149,
            "description": "Whether or not the filesystem API is supported",
            "itemtype": "property",
            "name": "fileapi",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 157,
            "description": "Whether or not tje Web Audio API is supported",
            "itemtype": "property",
            "name": "webAudio",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 165,
            "description": "Whether html Audio is supported in this browser",
            "itemtype": "property",
            "name": "htmlAudio",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 173,
            "description": "Whether or not local storage is supported",
            "itemtype": "property",
            "name": "localStorage",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 181,
            "description": "Whether or not touch is supported",
            "itemtype": "property",
            "name": "touch",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 189,
            "description": "Whether or not the gamepad API is supported",
            "itemtype": "property",
            "name": "gamepad",
            "type": "Boolean",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 198,
            "description": "Inherits the prototype of a parent object.\nfrom: https://github.com/isaacs/inherits/blob/master/inherits.js",
            "itemtype": "method",
            "name": "inherits",
            "params": [
                {
                    "name": "child",
                    "description": "The Child to inherit the prototype",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "The Parent to inherit from",
                    "type": "Object"
                },
                {
                    "name": "proto",
                    "description": "The prototype",
                    "type": "Object"
                }
            ],
            "class": "support"
        },
        {
            "file": "src\\plugin.js",
            "line": 9,
            "description": "Patches a core function with a new one. The function you override with has a special property\ncalled `this._super` which is a reference to the function you are overriding.",
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the method to override",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the method to override",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to override with",
                    "type": "Function"
                }
            ],
            "example": [
                "\n     //For example, to patch the gf.Sprite.prototype.isActiveAnimation function:\n\n     gf.plugin.patch(gf.Sprite, 'isActiveAnimation', function() {\n         //display a console message\n         console.log('checking animation!');\n         //call the original function\n         this._super();\n     });"
            ],
            "class": "plugin"
        },
        {
            "file": "src\\plugin.js",
            "line": 52,
            "description": "Registers a plugin into the gf namespace.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "plugin",
                    "description": "The object to place in the namespace",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the plugin to use as the key",
                    "type": "String"
                }
            ],
            "example": [
                "\n     //For example, to register a new plugin:\n     gf.plugin.register(MyPluginObject, 'MyPluginName');\n     var plg = new gf.MyPluginName();"
            ],
            "class": "plugin"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " src\\core.js:1"
        },
        {
            "message": "Missing item type\nLoad the audio file for this player",
            "line": " src\\audio\\AudioPlayer.js:48"
        },
        {
            "message": "Missing item type\nPlay a sound from the current time (0 by default).",
            "line": " src\\audio\\AudioPlayer.js:101"
        },
        {
            "message": "Missing item type\nPause playback and save the current position.",
            "line": " src\\audio\\AudioPlayer.js:238"
        },
        {
            "message": "Missing item type\nStop playback and reset to start.",
            "line": " src\\audio\\AudioPlayer.js:289"
        },
        {
            "message": "Missing item type\nMute this sound.",
            "line": " src\\audio\\AudioPlayer.js:334"
        },
        {
            "message": "Missing item type\nUnmute this sound.",
            "line": " src\\audio\\AudioPlayer.js:343"
        },
        {
            "message": "Missing item type\nSet the muted state of this sound.",
            "line": " src\\audio\\AudioPlayer.js:352"
        },
        {
            "message": "Missing item type\nSet the position of playback.",
            "line": " src\\audio\\AudioPlayer.js:381"
        },
        {
            "message": "Missing item type\nGet the position of playback.",
            "line": " src\\audio\\AudioPlayer.js:416"
        },
        {
            "message": "Missing item type\nFade a currently playing sound between two volumes.",
            "line": " src\\audio\\AudioPlayer.js:445"
        },
        {
            "message": "Missing item type\nSet the 3D position of the audio source.\nThe most common usage is to set the 'x' position\nto affect the left/right ear panning. Setting any value higher than\n1.0 will begin to decrease the volume of the sound as it moves further away.\nNOTE: This only works with Web Audio API, HTML5 Audio playback\nwill not be affected.",
            "line": " src\\audio\\AudioPlayer.js:520"
        },
        {
            "message": "Missing item type\nGet an audio node by ID.",
            "line": " src\\audio\\AudioPlayer.js:575"
        },
        {
            "message": "Missing item type\nGet the first active audio node.",
            "line": " src\\audio\\AudioPlayer.js:593"
        },
        {
            "message": "Missing item type\nGet the first inactive audio node.\nIf there is none, create a new one and add it to the pool.",
            "line": " src\\audio\\AudioPlayer.js:614"
        },
        {
            "message": "Missing item type\nIf there are more than 5 inactive audio nodes in the pool, clear out the rest.",
            "line": " src\\audio\\AudioPlayer.js:648"
        },
        {
            "message": "Missing item type\nClear 'onend' timeout before it ends.",
            "line": " src\\audio\\AudioPlayer.js:673"
        },
        {
            "message": "Missing item type\nSetup the gain node and panner for a Web Audio instance.",
            "line": " src\\audio\\AudioPlayer.js:688"
        },
        {
            "message": "Missing item type\nBuffer a sound from URL (or from cache) and decode to audio source (Web Audio API).",
            "line": " src\\audio\\AudioPlayer.js:715"
        },
        {
            "message": "Missing item type\nFinishes loading the Web Audio API sound and fires the loaded event",
            "line": " src\\audio\\AudioPlayer.js:755"
        },
        {
            "message": "Missing item type\nLoad the sound back into the buffer source.",
            "line": " src\\audio\\AudioPlayer.js:782"
        },
        {
            "message": "Missing item type\nInherited Methods",
            "line": " src\\display\\DisplayObjectContainer.js:144"
        },
        {
            "message": "Missing item type\ninput object",
            "line": " src\\input\\Input.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src\\core.js:1"
        },
        {
            "message": "Missing item type\nThe base grapefruit object",
            "line": " src\\core.js:31"
        }
    ]
}