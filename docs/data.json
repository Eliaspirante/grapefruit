{
    "project": {
        "name": "gf",
        "description": "A fun and easy WebGL-enabled JavaScript Game Engine",
        "version": "0.0.2",
        "url": "https://github.com/englercj/grapefruit"
    },
    "files": {
        "src\\audio\\audio.js": {
            "name": "src\\audio\\audio.js",
            "modules": {},
            "classes": {
                "audio": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\debug\\debug.js": {
            "name": "src\\debug\\debug.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\entity\\Entity.js": {
            "name": "src\\entity\\Entity.js",
            "modules": {},
            "classes": {
                "Entity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\entity\\Sprite.js": {
            "name": "src\\entity\\Sprite.js",
            "modules": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\entity\\entityPool.js": {
            "name": "src\\entity\\entityPool.js",
            "modules": {},
            "classes": {
                "entityPool": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\loader\\loader.js": {
            "name": "src\\loader\\loader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledLayer.js": {
            "name": "src\\map\\tiled\\TiledLayer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledMap.js": {
            "name": "src\\map\\tiled\\TiledMap.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledTileset.js": {
            "name": "src\\map\\tiled\\TiledTileset.js",
            "modules": {},
            "classes": {
                "Tiled Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\Layer.js": {
            "name": "src\\map\\Layer.js",
            "modules": {},
            "classes": {
                "Layer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\Map.js": {
            "name": "src\\map\\Map.js",
            "modules": {},
            "classes": {
                "Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\Vector.js": {
            "name": "src\\utils\\Vector.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\core.js": {
            "name": "src\\core.js",
            "modules": {
                "gf": 1
            },
            "classes": {
                "Point": 1,
                "types": 1,
                "support": 1,
                "Clock": 1,
                "game": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "gf": {
            "name": "gf",
            "submodules": {},
            "classes": {
                "audio": 1,
                "Entity": 1,
                "Sprite": 1,
                "entityPool": 1,
                "Tiled Map": 1,
                "Layer": 1,
                "Map": 1,
                "Point": 1,
                "types": 1,
                "support": 1,
                "Clock": 1,
                "game": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "src\\core.js",
            "line": 577,
            "description": "The base grapefruit object",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pos",
                    "description": "The starting position of the entity",
                    "type": "Array|Vector|Point"
                },
                {
                    "name": "settings",
                    "description": "Settings to override the defauls, acceptable values\n         are size {Vector}, name {String}, animations {Object}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n     var ent = new gf.Entity([10, 1], { name: 'MyEntity' });"
            ],
            "itemtype": "main",
            "type": "String",
            "return": {
                "description": "\n     returns a number representing how far off a version is.\n\n     will return a negative value if the first version is behind the second,\n     the negative number will show how many versions behind it is on largest version\n     point.\n     That is: '1.0' compared with '1.1' will yield -1\n     and    : '1.2.3' compared with '1.2.1' will yield -2\n\n     0 is returned if the versions match, and a positive number is returned if\n     the first version is larger than the second.",
                "type": "Number"
            }
        }
    },
    "classes": {
        "audio": {
            "name": "audio",
            "shortname": "audio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\audio\\audio.js",
            "line": 32,
            "description": "Grapefruit Audio API, provides an easy interface to use HTML5 Audio"
        },
        "Entity": {
            "name": "Entity",
            "shortname": "Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\entity\\Entity.js",
            "line": 12,
            "description": "The base Entity class. This class is the base for all entities interacting on the stage"
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\entity\\Sprite.js",
            "line": 1,
            "description": "The base Sprite class. This class is the base for all images on the screen"
        },
        "entityPool": {
            "name": "entityPool",
            "shortname": "entityPool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\entity\\entityPool.js",
            "line": 4,
            "description": "Holds a pool of different Entities that can be created, makes it very\neasy to quickly create different registered entities"
        },
        "Tiled Map": {
            "name": "Tiled Map",
            "shortname": "Tiled Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 1,
            "description": "This object represents a tileset used by a TiledMap.\nThere can be multiple Tilesets in a map"
        },
        "Layer": {
            "name": "Layer",
            "shortname": "Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\map\\Layer.js",
            "line": 1,
            "description": "Base Layer implementation, provides common functions for all Layer types"
        },
        "Map": {
            "name": "Map",
            "shortname": "Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\map\\Map.js",
            "line": 1,
            "description": "Base Map implementation, provides common functions for all Map types"
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\core.js",
            "line": 47,
            "description": "Texture object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Texture.html\">PIXI.Texture</a>"
        },
        "types": {
            "name": "types",
            "shortname": "types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\core.js",
            "line": 65,
            "description": "Constant types for easy use in code"
        },
        "support": {
            "name": "support",
            "shortname": "support",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\core.js",
            "line": 321,
            "description": "Feature detection so we cans witch between renderers, play audio correctly, and other things."
        },
        "Clock": {
            "name": "Clock",
            "shortname": "Clock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\core.js",
            "line": 484,
            "description": "High performance clock, from mrdoob's Three.js\nhttps://github.com/mrdoob/three.js/blob/master/src/core/Clock.js"
        },
        "game": {
            "name": "game",
            "shortname": "game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "gf",
            "namespace": "",
            "file": "src\\core.js",
            "line": 577,
            "description": "Main game object, controls the entire instance of the game"
        }
    },
    "classitems": [
        {
            "file": "src\\audio\\audio.js",
            "line": 42,
            "description": "Initializes the audio component",
            "itemtype": "method",
            "name": "init",
            "access": "private",
            "tagname": "",
            "class": "audio",
            "module": "gf"
        },
        {
            "file": "src\\audio\\audio.js",
            "line": 53,
            "description": "Plays a loaded audio clip",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the sound clip to play. You can also pass the object returned from a previous play",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "The options object you can pass properties like \"loop,\" \"volume,\" \"channel\"",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after the sound finishes playing",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The object returned can be passed to any audio function in the\n     first parameter to control that audio clip",
                "type": "Object"
            },
            "class": "audio",
            "module": "gf"
        },
        {
            "file": "src\\audio\\audio.js",
            "line": 114,
            "description": "Stops a playing audio clip",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the sound clip to stop. You can also pass the object returned from a previous play",
                    "type": "String|Object"
                },
                {
                    "name": "channel",
                    "description": "The channel that the clip is playing on (not needed if you pass the clip object as the first parameter)",
                    "type": "Number"
                }
            ],
            "class": "audio",
            "module": "gf"
        },
        {
            "file": "src\\audio\\audio.js",
            "line": 134,
            "description": "Pauses a playing audio clip",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the sound clip to pause. You can also pass the object returned from a previous play",
                    "type": "String|Object"
                },
                {
                    "name": "channel",
                    "description": "The channel that the clip is playing on (not needed if you pass the clip object as the first parameter)",
                    "type": "Number"
                }
            ],
            "class": "audio",
            "module": "gf"
        },
        {
            "file": "src\\audio\\audio.js",
            "line": 152,
            "description": "Plays all currently paused or stopped audio clips (only ones that have previously been started with gf.play)",
            "itemtype": "method",
            "name": "playAll",
            "class": "audio",
            "module": "gf"
        },
        {
            "file": "src\\audio\\audio.js",
            "line": 165,
            "description": "Stops all currently paused or playing audio clips",
            "itemtype": "method",
            "name": "stopAll",
            "class": "audio",
            "module": "gf"
        },
        {
            "file": "src\\audio\\audio.js",
            "line": 178,
            "description": "Pauses all currently playing audio clips",
            "itemtype": "method",
            "name": "pauseAll",
            "class": "audio",
            "module": "gf"
        },
        {
            "file": "src\\debug\\debug.js",
            "line": 40,
            "description": "DebugInfo box that displays live-updaing debug info",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\debug\\debug.js",
            "line": 141,
            "description": "mrdoob's stats.js (stats.js r10 - http://github.com/mrdoob/stats.js)",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 26,
            "description": "The type of the entity",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'neutral'",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 35,
            "description": "Can it collide with other entities",
            "itemtype": "property",
            "name": "collidable",
            "type": "Boolean",
            "default": "true",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 44,
            "description": "Can collide with the map when moving",
            "itemtype": "property",
            "name": "mapCollidable",
            "type": "Boolean",
            "default": "true",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 53,
            "description": "Is an entity",
            "itemtype": "property",
            "name": "mapCollidable",
            "type": "Boolean",
            "default": "true",
            "readonly": "",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 63,
            "description": "The velocity of the entity. You can set these in Tiled by using \"x|y\" notation\nvelocity of the entity (units per tick)",
            "itemtype": "property",
            "name": "velocity",
            "type": "Vector",
            "default": "new gf.Vector(0, 0)",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 73,
            "description": "Max velocity to cap the entity at (units per tick)",
            "itemtype": "property",
            "name": "maxVelocity",
            "type": "Vector",
            "default": "new gf.Vector(15, 15)",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 82,
            "description": "Acceleration of the entity (units per second)",
            "itemtype": "property",
            "name": "accel",
            "type": "Vector",
            "default": "new gf.Vector(250, 250)",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 91,
            "description": "Friction to apply to this entity",
            "itemtype": "property",
            "name": "friction",
            "type": "Vector",
            "default": "0",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 100,
            "description": "Gravity to apply to this entity",
            "itemtype": "property",
            "name": "gravity",
            "type": "Vector",
            "default": "0.98 (earth's gravity)",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 109,
            "description": "Whether or not the entity is \"alive\", advisory only",
            "itemtype": "property",
            "name": "alive",
            "type": "Boolean",
            "default": "true",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 118,
            "description": "Whether the entity is falling (read only)",
            "itemtype": "property",
            "name": "falling",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 128,
            "description": "Whether the entity is jumping (read only)",
            "itemtype": "property",
            "name": "jumping",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 138,
            "description": "Whether the entity is on a ladder tile (read only)",
            "itemtype": "property",
            "name": "onladder",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 153,
            "description": "Calculates distance between this object and another",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "Distance between this entity and another",
                "type": "Number"
            },
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 169,
            "description": "Computes the velocity taking into account gravity, friction, etc",
            "itemtype": "method",
            "name": "computeVelocity",
            "params": [
                {
                    "name": "vel",
                    "description": "The Vector to apply the changes to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The modified vector",
                "type": "Vector"
            },
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 196,
            "description": "Checks if this entity intersects with the passed object\nfrom http://gamedev.stackexchange.com/questions/586/what-is-the-fastest-way-to-work-out-2d-bounding-box-intersection",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "obj",
                    "description": "The Entity to check if this intersects with",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 208,
            "description": "Checks if this entity collides with the passed Entity, a penetration vector is calculated.\nThis method is called from gf.game.checkCollisions(ent); That method will use this to check\nfor any collisions between that entity and all the others on the stage.\nfrom http://gamedev.stackexchange.com/questions/586/what-is-the-fastest-way-to-work-out-2d-bounding-box-intersection",
            "itemtype": "method",
            "name": "checkCollision",
            "params": [
                {
                    "name": "obj",
                    "description": "The Entity to check if this entity collides with",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "",
                "type": "Vector"
            },
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 235,
            "description": "Calculate the velocity of the entity, and then apply it. This is different than moveEntity\nbecause it checks for map collisions, and applies gravity and friction with computeVelocity",
            "itemtype": "method",
            "name": "updateMovement",
            "return": {
                "description": "Returns the map colliders that the entity is interacting with",
                "type": "Array"
            },
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 291,
            "description": "Moves the entity to a new position using the velocity.",
            "itemtype": "method",
            "name": "moveEntity",
            "params": [
                {
                    "name": "vel",
                    "description": "The optional velocity to move the entity.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Entity"
            },
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 314,
            "description": "On Collision Event\n     called when this object is collided into by another, by default if something collides with\n     a collectable entity we remove the collectable",
            "itemtype": "method",
            "name": "onCollision",
            "params": [
                {
                    "name": "vel",
                    "description": "Collision Vector",
                    "type": "Vector"
                },
                {
                    "name": "obj",
                    "description": "Colliding object",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Entity"
            },
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 330,
            "description": "On Move Event\n     called when this entity moves",
            "itemtype": "method",
            "name": "onMove",
            "params": [
                {
                    "name": "vel",
                    "description": "Velocity the entity moved",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Entity"
            },
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Entity.js",
            "line": 341,
            "description": "On Break Tile Event\n     called when a tile is broken",
            "itemtype": "method",
            "name": "onBreakTile",
            "params": [
                {
                    "name": "tile",
                    "description": "the tile that is broken",
                    "type": "Unkown"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Entity"
            },
            "class": "Entity",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Sprite.js",
            "line": 15,
            "description": "The size of the sprite",
            "itemtype": "property",
            "name": "size",
            "type": "gf.Vector",
            "default": "new gf.Vector(0, 0);",
            "class": "Sprite",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Sprite.js",
            "line": 24,
            "description": "The name of this sprite",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Sprite",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Sprite.js",
            "line": 33,
            "description": "The defined animations for this Sprite, this maps the names to the childIndexes",
            "itemtype": "property",
            "name": "anim",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "Object",
            "class": "Sprite",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Sprite.js",
            "line": 43,
            "description": "The currently active animation",
            "itemtype": "property",
            "name": "currentAnim",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "Object",
            "class": "Sprite",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Sprite.js",
            "line": 68,
            "description": "Defines a new animation on the Sprite",
            "itemtype": "method",
            "name": "addAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation, any string you want to name it",
                    "type": "String"
                },
                {
                    "name": "frames",
                    "description": "The frames of the animation, you can pass one gf.Texture\n     as a frame, or an Array of gf.Texture's",
                    "type": "Texture|Array"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Sprite"
            },
            "example": [
                "\n     spr.addAnimation('walk-left', new gf.Texture())\n         .addAnimation('walk-right', [new gf.Texture(), new gf.Texture()]);"
            ],
            "class": "Sprite",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Sprite.js",
            "line": 98,
            "description": "Sets the active animation of the sprite, and starts the animation at index 0",
            "itemtype": "method",
            "name": "setActiveAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation to play (defined with addAnimation());",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback when the animation completes, NOT YET IMPLEMENTED",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Sprite"
            },
            "example": [
                "\n     spr.addAnimation('me', new gf.Texture())\n         .setActiveAnimation('me');"
            ],
            "class": "Sprite",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Sprite.js",
            "line": 127,
            "description": "Convenience method for setting the position of the Sprite.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "X coord to put the sprite at.\n      If an Array, Vector, or Point is passed then the y parameter is ignored",
                    "type": "Number|Array|Vector|Point"
                },
                {
                    "name": "y",
                    "description": "Y coord to put the sprite at",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Sprite"
            },
            "example": [
                "\n     spr.setPosition(1, 1)\n         .setPosition([5, 5])\n         .setPosition(new gf.Point(10, 10))\n         .setPosition(new gf.Vector(20, 20));"
            ],
            "class": "Sprite",
            "module": "gf"
        },
        {
            "file": "src\\entity\\Sprite.js",
            "line": 156,
            "description": "Checks if the name is the active animation",
            "itemtype": "method",
            "name": "isActiveAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation to check if it is currently active",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the animation is active, false otherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n     spr.addAnimation('walk-left', new gf.Texture())\n         .isActiveAnimation('walk-left'); //false\n\n     spr.setActiveAnimation('walk-left')\n         .isActiveAnimation('walk-left'); //true"
            ],
            "class": "Sprite",
            "module": "gf"
        },
        {
            "file": "src\\entity\\entityPool.js",
            "line": 12,
            "description": "Adds an entity Object to the pool",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Entity to add",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "The Entity or decendant to add to the pool",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the passed object",
                "type": "Object"
            },
            "example": [
                "\n     //create a new ckass to be instantiated\n     var Bug = gf.entityPool.add('bug', gf.Entity.extend({\n         //ctor function\n         init: function(pos, settings) {\n             //call the base ctor\n             this._super(pos, settings);\n\n             this.color = 'red';\n         },\n         beBug: function() {\n             console.log(\"I'm a bug\");\n         }\n     }));\n\n     //then later in your game code\n     var mybug = gf.entityPool.create('bug', {\n         pos: [10, 10]\n     });"
            ],
            "class": "entityPool",
            "module": "gf"
        },
        {
            "file": "src\\entity\\entityPool.js",
            "line": 42,
            "description": "Checks if the entity exists in the pool",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Entity to check if is in the pool",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the passed object",
                "type": "Boolean"
            },
            "class": "entityPool",
            "module": "gf"
        },
        {
            "file": "src\\entity\\entityPool.js",
            "line": 52,
            "description": "Creates a new entity from the pool",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Entity to check if is in the pool",
                    "type": "String"
                },
                {
                    "name": "props",
                    "description": "The properties that would normally be passed as the \"settings\" of the Entity",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new instance of the object from the pool",
                "type": "Entity"
            },
            "example": [
                "\n     //create a new ckass to be instantiated\n     var Bug = gf.entityPool.add('bug', gf.Entity.extend({\n         //ctor function\n         init: function(pos, settings) {\n             //call the base ctor\n             this._super(pos, settings);\n\n             this.color = 'red';\n         },\n         beBug: function() {\n             console.log(\"I'm a bug\");\n         }\n     }));\n\n     //then later in your game code\n     var mybug = gf.entityPool.create('bug', {\n         pos: [10, 10]\n     });"
            ],
            "class": "entityPool",
            "module": "gf"
        },
        {
            "file": "src\\loader\\loader.js",
            "line": 9,
            "description": "Resource format:\n           {\n               name: String,   //key name\n               type: String,   //image, json, xml, texture, world\n               src: String     //url\n           }\nCallbacks format:\n           {\n               error: function(error, resource),       //an error occured when loading a resource\n               progress: function(percent, resource),  //progress of a resource loading\n               load: function(resource),               //a resource has loaded\n\n           }",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\loader\\loader.js",
            "line": 56,
            "description": "Resources format:\n           [\n               {\n                   name: String,   //key name\n                   type: String,   //image, json, xml, texture, world\n                   src: String     //url\n               },\n               ...\n           ]\nCallbacks format:\n           {\n               start: function(resource),              //when loading of a resource starts\n               error: function(error, resource),       //an error occured when loading a resource\n               progress: function(percent, resource),  //progress of a resource loading\n               load: function(resource),               //a resource has loaded\n               complete: function(resources),          //all resources have completed loading\n           }",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 11,
            "description": "The tile IDs of the tilemap",
            "itemtype": "property",
            "name": "name",
            "type": "Uint32Array",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 19,
            "description": "The square size of the tiles in the layer",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Number",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 12,
            "description": "The tile size",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Vector",
            "default": "new gf.Vector(0, 0)",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 21,
            "description": "The user-defined properties",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "default": "{}",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 30,
            "description": "The scale of the map",
            "itemtype": "property",
            "name": "scale",
            "type": "Number",
            "default": "1",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 39,
            "description": "The scaled size (size * tileSize * scale)",
            "itemtype": "property",
            "name": "scaledSize",
            "type": "Vector",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 50,
            "description": "The maximum extent of the map (largest x and y the map has)\nassuming 0,0 is in the middle of the map, calculate the minimum\nand maximum extent of the map",
            "itemtype": "property",
            "name": "extent",
            "type": "Object",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 69,
            "description": "The tilesets used by this map",
            "itemtype": "property",
            "name": "tilesets",
            "type": "Array",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 81,
            "description": "The layer for collisions",
            "itemtype": "property",
            "name": "collisionLayer",
            "type": "Array",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 89,
            "description": "The tileset for the collision layer",
            "itemtype": "property",
            "name": "collisionTileset",
            "type": "TiledTileset",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 97,
            "description": "The version of this map",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "class": "Tiled Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 8,
            "description": "The name of the layer",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Layer",
            "module": "gf"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 17,
            "description": "The size of the layer",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new gf.Vector(1, 1)",
            "class": "Layer",
            "module": "gf"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 26,
            "description": "Texture of the layer",
            "itemtype": "property",
            "name": "texture",
            "type": "Texture",
            "default": "null",
            "class": "Layer",
            "module": "gf"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 41,
            "description": "Half of the size of the layer",
            "itemtype": "property",
            "name": "hSize",
            "type": "Vector",
            "access": "private",
            "tagname": "",
            "class": "Layer",
            "module": "gf"
        },
        {
            "file": "src\\map\\Map.js",
            "line": 8,
            "description": "The size of the map",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new gf.Vector(0, 0)",
            "class": "Map",
            "module": "gf"
        },
        {
            "file": "src\\map\\Map.js",
            "line": 25,
            "description": "Gets a layer based on the layer's id or name",
            "itemtype": "method",
            "name": "getLayer",
            "params": [
                {
                    "name": "id",
                    "description": "The layer's number id or string name.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "Returns the found layer, or null if not found",
                "type": "Layer"
            },
            "class": "Map",
            "module": "gf"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 1,
            "description": "Based on Vector2 from three.js\nthanks mrdoob: https://github.com/mrdoob/three.js/blob/master/src/math/Vector2.js",
            "class": "Point",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 1,
            "license": "GrapeFruit Game Engine\nCopyright (c) 2012, Chad Engler\n\nGrapeFruit is licensed under the MIT License.\nhttp://www.opensource.org/licenses/mit-license.php\n\nKnown Limiting Features:\n  - Canvas\n      - IE 9+\n      - FF 2+\n      - Chrome 4+\n      - Safari 3.1+\n      - Opera 9+\n\n  - WebGL\n      - IE 11+\n      - FF 4+\n      - Chrome 8+\n      - Safari 6+\n      - Opera 12+\n\n  - Object.create\n      - IE 9+\n      - FF 4+\n      - Chrome 7+\n      - Safari 5+\n      - Opera 12+",
            "class": "Point",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 72,
            "description": "Entity types",
            "itemtype": "property",
            "name": "ENTITY",
            "type": "Object",
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 85,
            "description": "Layer types",
            "itemtype": "property",
            "name": "LAYER",
            "type": "Object",
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 95,
            "description": "Tile collision types",
            "itemtype": "property",
            "name": "COLLISION",
            "type": "Object",
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 109,
            "description": "Event definitions",
            "itemtype": "property",
            "name": "EVENT",
            "type": "Object",
            "deprecated": true,
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 124,
            "description": "Resource types",
            "itemtype": "property",
            "name": "RESOURCE",
            "type": "Object",
            "deprecated": true,
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 142,
            "description": "Bindable keycodes",
            "itemtype": "property",
            "name": "KEY",
            "type": "Object",
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 227,
            "description": "Bindable Mouse Events",
            "itemtype": "property",
            "name": "MOUSE",
            "type": "Object",
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 243,
            "description": "Bindable Touch Events",
            "itemtype": "property",
            "name": "TOUCH",
            "type": "Object",
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 259,
            "description": "Bindable Gamepad Buttons",
            "itemtype": "property",
            "name": "GP_BUTTONS",
            "type": "Object",
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 295,
            "description": "Bindable Gamepad Axes",
            "itemtype": "property",
            "name": "GP_AXES",
            "type": "Object",
            "class": "types",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 328,
            "description": "The current user agent string",
            "itemtype": "property",
            "name": "ua",
            "type": "String",
            "class": "support",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 336,
            "description": "Whether or not canvas is supported",
            "itemtype": "property",
            "name": "canvas",
            "type": "bool",
            "class": "support",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 344,
            "description": "Whether or not webgl is supported",
            "itemtype": "property",
            "name": "webgl",
            "type": "bool",
            "class": "support",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 352,
            "description": "Whether or not web workers are supported",
            "itemtype": "property",
            "name": "workers",
            "type": "bool",
            "class": "support",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 360,
            "description": "Whether or not the filesystem API is supported",
            "itemtype": "property",
            "name": "fileapi",
            "type": "bool",
            "class": "support",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 368,
            "description": "Whether or not the audio elements are supported, and if so which types",
            "itemtype": "property",
            "name": "audio",
            "type": "Object",
            "class": "support",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 382,
            "description": "Whether or not local storage is supported",
            "itemtype": "property",
            "name": "localStorage",
            "type": "bool",
            "class": "support",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 390,
            "description": "Whether or not touch is supported",
            "itemtype": "property",
            "name": "touch",
            "type": "bool",
            "class": "support",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 398,
            "description": "Whether or not the gamepad API is supported",
            "itemtype": "property",
            "name": "gamepad",
            "type": "bool",
            "class": "support",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 510,
            "description": "Starts the timer",
            "itemtype": "method",
            "name": "start",
            "example": [
                "\n     clock.start();"
            ],
            "class": "Clock",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 524,
            "description": "Stops the timer",
            "itemtype": "method",
            "name": "stop",
            "example": [
                "\n     clock.stop();"
            ],
            "class": "Clock",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 535,
            "description": "Gets the total time that the timer has been running",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "Total ellapsed time in ms",
                "type": "Number"
            },
            "example": [
                "\n     clock.getElapsedTime();"
            ],
            "class": "Clock",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 548,
            "description": "Gets the difference in time since getDelta() was called last",
            "itemtype": "method",
            "name": "getDelta",
            "return": {
                "description": "Ellapsed time since last call in seconds",
                "type": "Number"
            },
            "example": [
                "\n     clock.getDelta();"
            ],
            "class": "Clock",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 584,
            "description": "List of all objects on the stage by id",
            "itemtype": "property",
            "name": "objects",
            "type": "{Object}",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 592,
            "description": "Number of objects added to the stage",
            "itemtype": "property",
            "name": "numObjects",
            "type": "{Number}",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 600,
            "description": "Maximum Z value",
            "itemtype": "property",
            "name": "MAX_Z",
            "type": "{Number}",
            "default": "500",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 611,
            "description": "Raw PIXI.stage instance",
            "itemtype": "property",
            "name": "_stage",
            "type": "{PIXI.Stage}",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 621,
            "description": "Raw gf.Clock instance for internal timing",
            "itemtype": "property",
            "name": "_clock",
            "type": "{gf.Clock}",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 631,
            "description": "Raw rendering engine",
            "itemtype": "property",
            "name": "_renderer",
            "type": "{PIXI.WebGLRenderer|PIXI.CanvasRenderer}",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 641,
            "description": "Internal ID counter for object IDs",
            "itemtype": "property",
            "name": "_nextId",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 650,
            "description": "The domElement that we are rendering into (the container)",
            "itemtype": "property",
            "name": "_cont",
            "type": "{DOMELement}",
            "access": "private",
            "tagname": "",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 659,
            "description": "Tracker to see if the game has been initialized yet",
            "itemtype": "property",
            "name": "_cont",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 668,
            "description": "Initializes a new game instance, only one allowed",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "contId",
                    "description": "The container for the new canvas we will create for the game",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "Options such as gravity, friction, and renderMethod",
                    "type": "Object"
                }
            ],
            "example": [
                " gf.game.init('myDiv', { renderMethod: 'webgl' });"
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 751,
            "description": "Gets the next object id for an object",
            "itemtype": "method",
            "name": "getNextObjectId",
            "access": "private",
            "tagname": "",
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 760,
            "description": "Adds an object to the current stage",
            "itemtype": "method",
            "name": "addObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The sprite to the stage",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 780,
            "description": "Removes a sprite from the stage",
            "itemtype": "method",
            "name": "removeObject",
            "params": [
                {
                    "name": "obj",
                    "description": "The sprite to the stage",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 818,
            "description": "Begins the render loop",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 830,
            "description": "Check if passed entity collides with any others",
            "itemtype": "method",
            "name": "checkCollisions",
            "params": [
                {
                    "name": "obj",
                    "description": "The sprite to the stage",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "Returns an array of colliders",
                "type": "Array"
            },
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 860,
            "description": "locks the camera on an entity",
            "itemtype": "method",
            "name": "cameraTrack",
            "params": [
                {
                    "name": "ent",
                    "description": "The sprite to the stage",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game",
            "module": "gf"
        },
        {
            "file": "src\\core.js",
            "line": 900,
            "description": "The looping render tick",
            "itemtype": "method",
            "name": "_tick",
            "access": "private",
            "tagname": "",
            "class": "game",
            "module": "gf"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " src\\core.js:1"
        },
        {
            "message": "Missing item type\nDebugInfo box that displays live-updaing debug info",
            "line": " src\\debug\\debug.js:40"
        },
        {
            "message": "Missing item type\nmrdoob's stats.js (stats.js r10 - http://github.com/mrdoob/stats.js)",
            "line": " src\\debug\\debug.js:141"
        },
        {
            "message": "Missing item type\nResource format:\n           {\n               name: String,   //key name\n               type: String,   //image, json, xml, texture, world\n               src: String     //url\n           }\nCallbacks format:\n           {\n               error: function(error, resource),       //an error occured when loading a resource\n               progress: function(percent, resource),  //progress of a resource loading\n               load: function(resource),               //a resource has loaded\n\n           }",
            "line": " src\\loader\\loader.js:9"
        },
        {
            "message": "Missing item type\nResources format:\n           [\n               {\n                   name: String,   //key name\n                   type: String,   //image, json, xml, texture, world\n                   src: String     //url\n               },\n               ...\n           ]\nCallbacks format:\n           {\n               start: function(resource),              //when loading of a resource starts\n               error: function(error, resource),       //an error occured when loading a resource\n               progress: function(percent, resource),  //progress of a resource loading\n               load: function(resource),               //a resource has loaded\n               complete: function(resources),          //all resources have completed loading\n           }",
            "line": " src\\loader\\loader.js:56"
        },
        {
            "message": "Missing item type\nBased on Vector2 from three.js\nthanks mrdoob: https://github.com/mrdoob/three.js/blob/master/src/math/Vector2.js",
            "line": " src\\utils\\Vector.js:1"
        },
        {
            "message": "Missing item type",
            "line": " src\\core.js:1"
        }
    ]
}