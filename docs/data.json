{
    "project": {
        "name": "gf",
        "description": "A fun and easy WebGL-enabled JavaScript Game Engine",
        "version": "0.0.3",
        "url": "https://github.com/englercj/grapefruit"
    },
    "files": {
        "src\\debug\\debug.js": {
            "name": "src\\debug\\debug.js",
            "modules": {},
            "classes": {
                "debug": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\gui\\Gui.js": {
            "name": "src\\gui\\Gui.js",
            "modules": {},
            "classes": {
                "Gui": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\gui\\GuiItem.js": {
            "name": "src\\gui\\GuiItem.js",
            "modules": {},
            "classes": {
                "GuiItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\gui\\Hud.js": {
            "name": "src\\gui\\Hud.js",
            "modules": {},
            "classes": {
                "Hud": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\gui\\HudItem.js": {
            "name": "src\\gui\\HudItem.js",
            "modules": {},
            "classes": {
                "HudItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\GamepadButtons.js": {
            "name": "src\\input\\GamepadButtons.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\GamepadSticks.js": {
            "name": "src\\input\\GamepadSticks.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Input.js": {
            "name": "src\\input\\Input.js",
            "modules": {},
            "classes": {
                "Input": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\InputManager.js": {
            "name": "src\\input\\InputManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Keyboard.js": {
            "name": "src\\input\\Keyboard.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\input\\Mouse.js": {
            "name": "src\\input\\Mouse.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledLayer.js": {
            "name": "src\\map\\tiled\\TiledLayer.js",
            "modules": {},
            "classes": {
                "TiledLayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledMap.js": {
            "name": "src\\map\\tiled\\TiledMap.js",
            "modules": {},
            "classes": {
                "TiledMap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledObjectGroup.js": {
            "name": "src\\map\\tiled\\TiledObjectGroup.js",
            "modules": {},
            "classes": {
                "TiledObjectGroup": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\tiled\\TiledTileset.js": {
            "name": "src\\map\\tiled\\TiledTileset.js",
            "modules": {},
            "classes": {
                "TiledTileset": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\Layer.js": {
            "name": "src\\map\\Layer.js",
            "modules": {},
            "classes": {
                "Layer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\map\\Map.js": {
            "name": "src\\map\\Map.js",
            "modules": {},
            "classes": {
                "Map": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\plugin\\plugin.js": {
            "name": "src\\plugin\\plugin.js",
            "modules": {},
            "classes": {
                "plugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\Clock.js": {
            "name": "src\\utils\\Clock.js",
            "modules": {},
            "classes": {
                "Clock": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\Vector.js": {
            "name": "src\\utils\\Vector.js",
            "modules": {},
            "classes": {
                "Vector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\utils\\utils.js": {
            "name": "src\\utils\\utils.js",
            "modules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\AssetLoader.js": {
            "name": "src\\AssetLoader.js",
            "modules": {},
            "classes": {
                "AssetLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\AudioPlayer.js": {
            "name": "src\\AudioPlayer.js",
            "modules": {},
            "classes": {
                "AudoPlayer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Camera.js": {
            "name": "src\\Camera.js",
            "modules": {},
            "classes": {
                "Camera": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\DisplayObject.js": {
            "name": "src\\DisplayObject.js",
            "modules": {},
            "classes": {
                "DisplayObject": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Entity.js": {
            "name": "src\\Entity.js",
            "modules": {},
            "classes": {
                "Entity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Game.js": {
            "name": "src\\Game.js",
            "modules": {},
            "classes": {
                "game": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\Sprite.js": {
            "name": "src\\Sprite.js",
            "modules": {},
            "classes": {
                "Sprite": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\core.js": {
            "name": "src\\core.js",
            "modules": {},
            "classes": {
                "Point": 1,
                "Rectangle": 1,
                "Texture": 1,
                "EventTarget": 1,
                "support": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\entityPool.js": {
            "name": "src\\entityPool.js",
            "modules": {},
            "classes": {
                "entityPool": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "debug": {
            "name": "debug",
            "shortname": "debug",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\debug\\debug.js",
            "line": 1,
            "description": "A simple object to show some debug items"
        },
        "Gui": {
            "name": "Gui",
            "shortname": "Gui",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\gui\\Gui.js",
            "line": 1,
            "description": "The base Gui that holds GuiItems to be presented as a Gui",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pos",
                    "description": "The starting position of the sprite",
                    "type": "Array|Vector|Point"
                },
                {
                    "name": "settings",
                    "description": "Settings to override the defauls",
                    "type": "Object"
                }
            ]
        },
        "GuiItem": {
            "name": "GuiItem",
            "shortname": "GuiItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\gui\\GuiItem.js",
            "line": 1,
            "description": "The base GuiItem that represents an element of a gui on the screen.",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pos",
                    "description": "The starting position of the sprite",
                    "type": "Array|Vector|Point"
                },
                {
                    "name": "settings",
                    "description": "Settings to override the defauls",
                    "type": "Object"
                }
            ]
        },
        "Hud": {
            "name": "Hud",
            "shortname": "Hud",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\gui\\Hud.js",
            "line": 1,
            "description": "The Hud that holds HudItems to be presented as a Hud",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pos",
                    "description": "The starting position of the sprite",
                    "type": "Array|Vector|Point"
                },
                {
                    "name": "settings",
                    "description": "Settings to override the defauls",
                    "type": "Object"
                }
            ]
        },
        "HudItem": {
            "name": "HudItem",
            "shortname": "HudItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\gui\\HudItem.js",
            "line": 1,
            "description": "The base HudItem that represents an element of a hud on the screen.",
            "extends": "GuiItem",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pos",
                    "description": "The starting position of the sprite",
                    "type": "Array|Vector|Point"
                },
                {
                    "name": "settings",
                    "description": "Settings to override the defauls",
                    "type": "Object"
                }
            ]
        },
        "Input": {
            "name": "Input",
            "shortname": "Input",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\input\\Input.js",
            "line": 178,
            "description": "The base Input object, holds common functions and properties between input types",
            "is_constructor": 1,
            "params": [
                {
                    "name": "manager",
                    "description": "The InputManager instance that this Input object is managed by",
                    "type": "InputManager"
                },
                {
                    "name": "game",
                    "description": "The game this camera belongs to",
                    "type": "Game"
                }
            ]
        },
        "TiledLayer": {
            "name": "TiledLayer",
            "shortname": "TiledLayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 1,
            "description": "The TiledLayer is the visual tiled layer that actually displays on the screen\n\nThis class will be created by the TiledMap, there shouldn't be a reason to\ncreate an instance on your own.",
            "extends": "Layer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "layer",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "TiledMap": {
            "name": "TiledMap",
            "shortname": "TiledMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 1,
            "description": "Tiled map, expects a Tiled TMX file loaded by the gf.loader as the argument.\nThe loader knows to load all textures and other resources when loading a world TMX\nfile, and this expets that to already be done.",
            "extends": "Map",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "All the settings for the map",
                    "type": "Object"
                }
            ]
        },
        "TiledObjectGroup": {
            "name": "TiledObjectGroup",
            "shortname": "TiledObjectGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 1,
            "description": "Tiled object group is a special layer that contains entities",
            "extends": "Layer",
            "is_constructor": 1,
            "params": [
                {
                    "name": "group",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "TiledTileset": {
            "name": "TiledTileset",
            "shortname": "TiledTileset",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 1,
            "description": "This object represents a tileset used by a TiledMap.\nThere can be multiple Tilesets in a map",
            "extends": "Texture",
            "is_constructor": 1,
            "params": [
                {
                    "name": "settings",
                    "description": "All the settings for the tileset",
                    "type": "Object"
                }
            ]
        },
        "Layer": {
            "name": "Layer",
            "shortname": "Layer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\Layer.js",
            "line": 1,
            "description": "Base Layer implementation, provides common functions for all Layer types",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "layer",
                    "description": "All the settings for the layer",
                    "type": "Object"
                }
            ]
        },
        "Map": {
            "name": "Map",
            "shortname": "Map",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\map\\Map.js",
            "line": 1,
            "description": "Base Map implementation, provides common functions for all Map types",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "map",
                    "description": "All the settings for the map",
                    "type": "Object"
                }
            ]
        },
        "plugin": {
            "name": "plugin",
            "shortname": "plugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\plugin\\plugin.js",
            "line": 2,
            "description": "Namespace for all plugins, it also provides methods for patching\ncore functions, and registering plugins."
        },
        "Clock": {
            "name": "Clock",
            "shortname": "Clock",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\Clock.js",
            "line": 1,
            "description": "High performance clock, from mrdoob's Three.js\nhttps://github.com/mrdoob/three.js/blob/master/src/core/Clock.js",
            "is_constructor": 1,
            "params": [
                {
                    "name": "autoStart",
                    "description": "Automatically start the counter or not",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n     var clock = new gf.Clock(false);\n     //... some code ...\n     clock.start();\n     //... some long code ...\n     var delta = clock.getDelta();"
            ]
        },
        "Vector": {
            "name": "Vector",
            "shortname": "Vector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\Vector.js",
            "line": 1,
            "description": "A 2d Vector implementation stolen directly from mrdoob's THREE.js\nthanks mrdoob: https://github.com/mrdoob/three.js/blob/master/src/math/Vector2.js",
            "is_constructor": 1,
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ]
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\utils\\utils.js",
            "line": 1,
            "description": "This object represents a tileset used by a TiledMap.\nThere can be multiple Tilesets in a map"
        },
        "AssetLoader": {
            "name": "AssetLoader",
            "shortname": "AssetLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\AssetLoader.js",
            "line": 1,
            "description": "The AssetLoader loads and parses different game assets, such as sounds, textures,\nTMX World JSON file (exported from the <a href=\"http://mapeditor.org\">Tiled Editor</a>),\nand Spritesheet JSON files (published from <a href=\"http://www.codeandweb.com/texturepacker\">Texture Packer</a>).",
            "is_constructor": 1,
            "params": [
                {
                    "name": "resources",
                    "description": "Array of resources to load when `.load()` is called",
                    "type": "Array"
                }
            ],
            "example": [
                "\n     var loader = new AssetLoader(['/my/texture.png']);\n     loader.load();\n     //OR\n     var loader = new AssetLoader();\n     loader.load(['/my/texture.png']);"
            ]
        },
        "AudoPlayer": {
            "name": "AudoPlayer",
            "shortname": "AudoPlayer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\AudioPlayer.js",
            "line": 1,
            "description": "Grapefruit Audio API, provides an easy interface to use HTML5 Audio",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "Game instance for this audio player",
                    "type": "Game"
                }
            ]
        },
        "Camera": {
            "name": "Camera",
            "shortname": "Camera",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Camera.js",
            "line": 1,
            "description": "A basic Camera object that provides some effects. It also will contain the HUD and GUI\nto ensure they are using \"screen-coords\".\nThis camera instance is based on\n<a href=\"https://github.com/photonstorm/kiwi-lite/blob/master/Kiwi%20Lite/Camera.ts\">Kiwi-Lite's Camera</a>.\n\nTODO: Currently fade/flash don't show the colors. How should I actually show them, a PIXI.Sprite?",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "game",
                    "description": "The game this camera belongs to",
                    "type": "Game"
                },
                {
                    "name": "settings",
                    "description": "Any settings you want to override the default properties with",
                    "type": "Object"
                }
            ]
        },
        "DisplayObject": {
            "name": "DisplayObject",
            "shortname": "DisplayObject",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\DisplayObject.js",
            "line": 1,
            "description": "The base display object, that anything being put on the screen inherits from",
            "extends": "PIXI.DisplayObjectContainer",
            "is_constructor": 1
        },
        "Entity": {
            "name": "Entity",
            "shortname": "Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Entity.js",
            "line": 11,
            "description": "The base Entity class. This class is the base for all entities interacting on the stage",
            "extends": "Sprite",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pos",
                    "description": "The starting position of the entity",
                    "type": "Array|Vector|Point"
                },
                {
                    "name": "settings",
                    "description": "Settings to override the defauls, acceptable values\n         are size {Vector}, name {String}, animations {Object}",
                    "type": "Object"
                }
            ],
            "example": [
                "\n     var ent = new gf.Entity([10, 1], { name: 'MyEntity' });"
            ]
        },
        "game": {
            "name": "game",
            "shortname": "game",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Game.js",
            "line": 1,
            "description": "Main game object, controls the entire instance of the game",
            "is_constructor": 1,
            "params": [
                {
                    "name": "contId",
                    "description": "The container for the new canvas we will create for the game",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "Options such as gravity, friction, and renderMethod",
                    "type": "Object"
                }
            ]
        },
        "Sprite": {
            "name": "Sprite",
            "shortname": "Sprite",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\Sprite.js",
            "line": 19,
            "description": "The base Sprite class. This class is the base for all images on the screen",
            "extends": "DisplayObject",
            "is_constructor": 1,
            "params": [
                {
                    "name": "pos",
                    "description": "The starting position of the sprite",
                    "type": "Array|Vector|Point"
                },
                {
                    "name": "settings",
                    "description": "Settings to override the defauls",
                    "type": "Object"
                }
            ],
            "example": [
                "\n     var spr = new gf.Sprite([10, 1], { name: 'MySprite' });"
            ]
        },
        "Point": {
            "name": "Point",
            "shortname": "Point",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 37,
            "description": "Point object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Point.html\">PIXI.Point</a>"
        },
        "Rectangle": {
            "name": "Rectangle",
            "shortname": "Rectangle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 44,
            "description": "Rectangle object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Rectangle.html\">PIXI.Point</a>"
        },
        "Texture": {
            "name": "Texture",
            "shortname": "Texture",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 51,
            "description": "Texture object, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/Texture.html\">PIXI.Texture</a>"
        },
        "EventTarget": {
            "name": "EventTarget",
            "shortname": "EventTarget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 58,
            "description": "EventTarget mixin, please see <a href=\"http://www.goodboydigital.com/pixijs/docs/classes/EventTarget.html\">PIXI.EventTarget</a>"
        },
        "support": {
            "name": "support",
            "shortname": "support",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\core.js",
            "line": 81,
            "description": "Feature detection so we cans witch between renderers, play audio correctly, and other things."
        },
        "entityPool": {
            "name": "entityPool",
            "shortname": "entityPool",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\entityPool.js",
            "line": 1,
            "description": "Holds a pool of different Entities that can be created, makes it very\neasy to quickly create different registered entities"
        }
    },
    "classitems": [
        {
            "file": "src\\debug\\debug.js",
            "line": 7,
            "description": "The styles applied to the fps box after it is created",
            "itemtype": "property",
            "name": "fpsStyle",
            "class": "debug"
        },
        {
            "file": "src\\debug\\debug.js",
            "line": 18,
            "description": "Shows the FPS Counter",
            "itemtype": "method",
            "name": "showFpsCounter",
            "class": "debug"
        },
        {
            "file": "src\\debug\\debug.js",
            "line": 30,
            "description": "Shows some debug info such as player position and the gamepad state",
            "itemtype": "method",
            "name": "showDebugInfo",
            "params": [
                {
                    "name": "game",
                    "description": "The game instance to show info for",
                    "type": "Game"
                },
                {
                    "name": "pad",
                    "description": "Whether or not to show gamepad info (defaults to true)",
                    "type": "Boolean"
                }
            ],
            "class": "debug"
        },
        {
            "file": "src\\debug\\debug.js",
            "line": 41,
            "description": "Called internally by the Game instance",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "class": "debug"
        },
        {
            "file": "src\\gui\\Gui.js",
            "line": 11,
            "description": "The name of the Gui",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Gui"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 11,
            "description": "Whether or not the item needs an update",
            "itemtype": "property",
            "name": "dirty",
            "type": "Boolean",
            "default": "true",
            "class": "GuiItem"
        },
        {
            "file": "src\\gui\\GuiItem.js",
            "line": 26,
            "description": "Overrides base update to do some calculations. Called internally on each frame",
            "itemtype": "method",
            "name": "update",
            "class": "GuiItem"
        },
        {
            "file": "src\\gui\\HudItem.js",
            "line": 11,
            "description": "The value of the item",
            "itemtype": "property",
            "name": "name",
            "type": "Mixed",
            "default": "''",
            "class": "HudItem"
        },
        {
            "file": "src\\gui\\HudItem.js",
            "line": 20,
            "description": "Sets whether or not you can drag the HudItem around",
            "itemtype": "property",
            "name": "draggable",
            "type": "Boolean",
            "default": "false",
            "class": "HudItem"
        },
        {
            "file": "src\\gui\\HudItem.js",
            "line": 29,
            "description": "[read only] Describes if the current item is being dragged or not",
            "itemtype": "property",
            "name": "dragging",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "HudItem"
        },
        {
            "file": "src\\gui\\HudItem.js",
            "line": 39,
            "description": "The font to use for text",
            "itemtype": "property",
            "name": "font",
            "type": "Font",
            "class": "HudItem"
        },
        {
            "file": "src\\gui\\HudItem.js",
            "line": 49,
            "description": "The initial value of the item to reset to",
            "itemtype": "property",
            "name": "initialValue",
            "type": "Mixed",
            "class": "HudItem"
        },
        {
            "file": "src\\gui\\HudItem.js",
            "line": 68,
            "description": "Resets the value to the initialValue",
            "itemtype": "method",
            "name": "reset",
            "return": {
                "description": "Returns itself for chainability",
                "type": "HudItem"
            },
            "class": "HudItem"
        },
        {
            "file": "src\\gui\\HudItem.js",
            "line": 77,
            "description": "Sets the value of the item",
            "itemtype": "method",
            "name": "set",
            "return": {
                "description": "Returns itself for chainability",
                "type": "HudItem"
            },
            "class": "HudItem"
        },
        {
            "file": "src\\input\\GamepadButtons.js",
            "line": 4,
            "description": "The threshold at which we consider a button \"pressed\"",
            "itemtype": "property",
            "name": "threshold",
            "type": "Number",
            "default": "0.4",
            "class": "Input"
        },
        {
            "file": "src\\input\\GamepadSticks.js",
            "line": 4,
            "description": "The threshold at which we consider a stick \"moved\"",
            "itemtype": "property",
            "name": "threshold",
            "type": "Number",
            "default": "0.5",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 1,
            "description": "input object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 5,
            "description": "Bindable keycodes",
            "itemtype": "property",
            "name": "KEY",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 90,
            "description": "Bindable Mouse Events",
            "itemtype": "property",
            "name": "MOUSE",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 106,
            "description": "Bindable Touch Events",
            "itemtype": "property",
            "name": "TOUCH",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 122,
            "description": "Bindable Gamepad Buttons",
            "itemtype": "property",
            "name": "GP_BUTTON",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 155,
            "description": "Bindable Gamepad Axes",
            "itemtype": "property",
            "name": "GP_AXIS",
            "type": "Object",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 187,
            "description": "The game instance this belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 195,
            "description": "The input manager this belongs to",
            "itemtype": "property",
            "name": "manager",
            "type": "InputManager",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 203,
            "description": "The binds that map an action to an input value",
            "itemtype": "property",
            "name": "binds",
            "type": "Object",
            "readonly": "",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 212,
            "description": "The callbacks that map from an action",
            "itemtype": "property",
            "name": "callbacks",
            "type": "Object",
            "readonly": "",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 221,
            "description": "The count of how many actions an input value is bound to",
            "itemtype": "property",
            "name": "callbacks",
            "type": "Object",
            "readonly": "",
            "class": "Input"
        },
        {
            "file": "src\\input\\Input.js",
            "line": 230,
            "description": "Tracks the status of each action",
            "itemtype": "property",
            "name": "status",
            "type": "Object",
            "readonly": "",
            "class": "Input"
        },
        {
            "file": "src\\input\\InputManager.js",
            "line": 2,
            "description": "The game instance this belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "TiledLayer"
        },
        {
            "file": "src\\input\\Keyboard.js",
            "line": 4,
            "description": "Tracks if a key is already down, so we don't repeat",
            "itemtype": "property",
            "name": "keydown",
            "type": "Object",
            "readonly": "",
            "class": "TiledLayer"
        },
        {
            "file": "src\\input\\Mouse.js",
            "line": 4,
            "description": "The current screen touches",
            "itemtype": "property",
            "name": "touches",
            "type": "Array",
            "readonly": "",
            "class": "TiledLayer"
        },
        {
            "file": "src\\input\\Mouse.js",
            "line": 13,
            "description": "The current position of the mouse",
            "itemtype": "property",
            "name": "position",
            "type": "Point",
            "readonly": "",
            "class": "TiledLayer"
        },
        {
            "file": "src\\input\\Mouse.js",
            "line": 22,
            "description": "The current position of the mouse",
            "itemtype": "property",
            "name": "position",
            "type": "Point",
            "readonly": "",
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 16,
            "description": "The tile IDs of the tilemap",
            "itemtype": "property",
            "name": "name",
            "type": "Uint32Array",
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 24,
            "description": "The sprite pool for rendering tiles",
            "itemtype": "property",
            "name": "tilePool",
            "type": "Object",
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 43,
            "description": "Creates all the tile sprites needed to display the layer",
            "itemtype": "method",
            "name": "renderTiles",
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 71,
            "description": "Creates the sprite for a tile and caches it in a position",
            "itemtype": "method",
            "name": "getTileSprite",
            "params": [
                {
                    "name": "tileX",
                    "description": "The x coord of the tile in units of tiles (not pixels)",
                    "type": "Number"
                },
                {
                    "name": "tileY",
                    "description": "The y coord of the tile in units of tiles (not pixels)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The sprite to display",
                "type": "PIXI.Sprite"
            },
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 96,
            "description": "Moves a tile sprite from one position to another,\ncreating it if the old position didn't have a sprite",
            "itemtype": "method",
            "name": "moveTileSprite",
            "params": [
                {
                    "name": "fromTileX",
                    "description": "The x coord of the tile in units of tiles (not pixels) to move from",
                    "type": "Number"
                },
                {
                    "name": "fromTileY",
                    "description": "The y coord of the tile in units of tiles (not pixels) to move from",
                    "type": "Number"
                },
                {
                    "name": "toTileX",
                    "description": "The x coord of the tile in units of tiles (not pixels) to move to",
                    "type": "Number"
                },
                {
                    "name": "toTileY",
                    "description": "The y coord of the tile in units of tiles (not pixels) to move to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The sprite to display",
                "type": "PIXI.Sprite"
            },
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 127,
            "description": "Transforms an x,y coord into the index of a tile in the tiles array",
            "itemtype": "method",
            "name": "getTileIndex",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord to transform, if a vector is passed it's x/y is used and the y param is ignored",
                    "type": "Number|Vector"
                },
                {
                    "name": "y",
                    "description": "The y coord to transform",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 146,
            "description": "Transforms an x,y coord into the TiledTileset tile id",
            "itemtype": "method",
            "name": "getTileId",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord to transform, if a vector is passed it's x/y is used and the y param is ignored",
                    "type": "Number|Vector"
                },
                {
                    "name": "y",
                    "description": "The y coord to transform",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledLayer.js",
            "line": 157,
            "description": "Pans the layer around, rendering stuff if necessary",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "The x amount to pan, if a Point is passed the dy param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "dy",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Layer"
            },
            "class": "TiledLayer"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 17,
            "description": "The tile size",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Vector",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 28,
            "description": "The scaled tile size",
            "itemtype": "property",
            "name": "scaledTileSize",
            "type": "Vector",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 39,
            "description": "The user-defined properties",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "default": "{}",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 48,
            "description": "The real size (size * scaledTileSize)",
            "itemtype": "property",
            "name": "realSize",
            "type": "Vector",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 59,
            "description": "The orientation of the map, currently only 'orthogonal' is supported",
            "itemtype": "property",
            "name": "orientation",
            "type": "String",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 67,
            "description": "The tilesets used by this map",
            "itemtype": "property",
            "name": "tilesets",
            "type": "Array",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 75,
            "description": "The tileset for the collision layer",
            "itemtype": "property",
            "name": "collisionTileset",
            "type": "TiledTileset",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 90,
            "description": "The layer for collisions",
            "itemtype": "property",
            "name": "collisionLayer",
            "type": "Array",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 98,
            "description": "The version of this map",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 146,
            "description": "Gets the tileset that an ID is associated with",
            "itemtype": "method",
            "name": "getTileset",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to find the tileset for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "TiledTileset"
            },
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 158,
            "description": "Checks an entities collision with the collision layer of this map",
            "itemtype": "method",
            "name": "checkCollision",
            "params": [
                {
                    "name": "ent",
                    "description": "The entity to check",
                    "type": "Entity"
                },
                {
                    "name": "sz",
                    "description": "The size of the entity",
                    "type": "Vector"
                },
                {
                    "name": "pv",
                    "description": "The potential movement vector",
                    "type": "Vector"
                }
            ],
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledMap.js",
            "line": 353,
            "description": "Notifies the map it needs to resize, re renders the viewport",
            "itemtype": "method",
            "name": "resize",
            "access": "private",
            "tagname": "",
            "class": "TiledMap"
        },
        {
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 12,
            "description": "The user-defined properties of this group. Usually defined in the TiledEditor",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "TiledObjectGroup"
        },
        {
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 20,
            "description": "The objects in this group that can be spawned",
            "itemtype": "property",
            "name": "objects",
            "type": "Array",
            "class": "TiledObjectGroup"
        },
        {
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 35,
            "description": "Spawns all the entities associated with this layer, and properly sets their attributes",
            "itemtype": "method",
            "name": "spawn",
            "return": {
                "description": "Returns itself for chainability",
                "type": "TiledObjectGroup"
            },
            "class": "TiledObjectGroup"
        },
        {
            "file": "src\\map\\tiled\\TiledObjectGroup.js",
            "line": 61,
            "description": "Despawns all the entities associated with this layer",
            "itemtype": "method",
            "name": "despawn",
            "return": {
                "description": "Returns itself for chainability",
                "type": "TiledObjectGroup"
            },
            "class": "TiledObjectGroup"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 19,
            "description": "The size of the tileset",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 27,
            "description": "The size of a tile in the tileset",
            "itemtype": "property",
            "name": "tileSize",
            "type": "Vector",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 35,
            "description": "The name of the tileset",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 43,
            "description": "The margin around a tile in the tileset",
            "itemtype": "property",
            "name": "margin",
            "type": "Number",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 51,
            "description": "The spacing around a tile in the tileset",
            "itemtype": "property",
            "name": "spacing",
            "type": "Number",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 59,
            "description": "The number of tiles calculated based on size, margin, and spacing",
            "itemtype": "property",
            "name": "numTiles",
            "type": "Vector",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 70,
            "description": "The first tileId in the tileset",
            "itemtype": "property",
            "name": "firstgid",
            "type": "Number",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 78,
            "description": "The last tileId in the tileset",
            "itemtype": "property",
            "name": "lastgid",
            "type": "Number",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 86,
            "description": "The properties of the tileset",
            "itemtype": "property",
            "name": "properties",
            "type": "Object",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 94,
            "description": "The properties of the tiles in the tileset (like collision stuff)",
            "itemtype": "property",
            "name": "tileproperties",
            "type": "Object",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 112,
            "description": "The texture instances for each tile in the set",
            "itemtype": "property",
            "name": "textures",
            "type": "Array",
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 141,
            "description": "Gets the tile properties for a tile based on it's ID",
            "itemtype": "method",
            "name": "getTileProperties",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to get the properties for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The properties of the tile",
                "type": "Object"
            },
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\tiled\\TiledTileset.js",
            "line": 166,
            "description": "Gets the tile texture for a tile based on it's ID",
            "itemtype": "method",
            "name": "getTileTexture",
            "params": [
                {
                    "name": "tileId",
                    "description": "The id of the tile to get the texture for",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The texture for the tile",
                "type": "Texture"
            },
            "class": "TiledTileset"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 10,
            "description": "The name of the layer",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Layer"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 19,
            "description": "The size of the layer",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new gf.Vector(1, 1)",
            "class": "Layer"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 34,
            "description": "Half of the size of the layer",
            "itemtype": "property",
            "name": "hSize",
            "type": "Vector",
            "access": "private",
            "tagname": "",
            "class": "Layer"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 45,
            "description": "Pans the layer around, rendering stuff if necessary",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "dx",
                    "description": "The x amount to pan, if a Point is passed the dy param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "dy",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Layer"
            },
            "class": "Layer"
        },
        {
            "file": "src\\map\\Layer.js",
            "line": 57,
            "description": "Tile collision types",
            "itemtype": "property",
            "name": "COLLISION",
            "type": "Object",
            "class": "Layer"
        },
        {
            "file": "src\\map\\Map.js",
            "line": 10,
            "description": "The game instance this belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Map"
        },
        {
            "file": "src\\map\\Map.js",
            "line": 18,
            "description": "The size of the map",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "default": "new gf.Vector(0, 0)",
            "class": "Map"
        },
        {
            "file": "src\\map\\Map.js",
            "line": 35,
            "description": "Gets a layer based on the layer's id or name",
            "itemtype": "method",
            "name": "getLayer",
            "params": [
                {
                    "name": "id",
                    "description": "The layer's number id or string name.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "Returns the found layer, or null if not found",
                "type": "Layer"
            },
            "class": "Map"
        },
        {
            "file": "src\\map\\Map.js",
            "line": 53,
            "description": "Pans the map around",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Point is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Map"
            },
            "class": "Map"
        },
        {
            "file": "src\\plugin\\plugin.js",
            "line": 10,
            "description": "Patches a core function with a new one. The function you override with has a special property\ncalled `this._super` which is a reference to the function you are overriding.",
            "itemtype": "method",
            "name": "patch",
            "params": [
                {
                    "name": "obj",
                    "description": "The object with the method to override",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the method to override",
                    "type": "String"
                },
                {
                    "name": "fn",
                    "description": "The function to override with",
                    "type": "Function"
                }
            ],
            "example": [
                "\n     //For example, to patch the gf.Sprite.prototype.isActiveAnimation function:\n\n     gf.plugin.patch(gf.Sprite, 'isActiveAnimation', function() {\n         //display a console message\n         console.log('checking animation!');\n         //call the original function\n         this._super();\n     });"
            ],
            "class": "plugin"
        },
        {
            "file": "src\\plugin\\plugin.js",
            "line": 53,
            "description": "Registers a plugin into the gf.plugin namespace.",
            "itemtype": "method",
            "name": "register",
            "params": [
                {
                    "name": "plugin",
                    "description": "The object to place in the namespace",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "The name of the plugin to use as the key",
                    "type": "String"
                }
            ],
            "example": [
                "\n     //For example, to register a new plugin:\n     gf.plugin.register(MyPluginObject, 'myPluginName');\n     var plg = new gf.plugin.myPluginName();\n     //OR\n     gf.plugin.myPluginName.someFunction();"
            ],
            "class": "plugin"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 26,
            "description": "Starts the timer",
            "itemtype": "method",
            "name": "start",
            "example": [
                "\n     clock.start();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 40,
            "description": "Stops the timer",
            "itemtype": "method",
            "name": "stop",
            "example": [
                "\n     clock.stop();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 51,
            "description": "Gets the total time that the timer has been running",
            "itemtype": "method",
            "name": "getElapsedTime",
            "return": {
                "description": "Total ellapsed time in ms",
                "type": "Number"
            },
            "example": [
                "\n     clock.getElapsedTime();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Clock.js",
            "line": 64,
            "description": "Gets the difference in time since getDelta() was called last",
            "itemtype": "method",
            "name": "getDelta",
            "return": {
                "description": "Ellapsed time since last call in seconds",
                "type": "Number"
            },
            "example": [
                "\n     clock.getDelta();"
            ],
            "class": "Clock"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 16,
            "description": "Sets the value of the vector",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 30,
            "description": "Sets the X value of the vector",
            "itemtype": "method",
            "name": "setX",
            "params": [
                {
                    "name": "x",
                    "description": "The x component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 42,
            "description": "Sets the Y value of the vector",
            "itemtype": "method",
            "name": "setY",
            "params": [
                {
                    "name": "y",
                    "description": "The y component of the vector",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 54,
            "description": "Sets a component value of the vector",
            "itemtype": "method",
            "name": "setComponent",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the component to set (0 = x, 1 = y)",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "The value to set the component to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 71,
            "description": "Gets a component value of the vector",
            "itemtype": "method",
            "name": "getComponent",
            "params": [
                {
                    "name": "index",
                    "description": "The index of the component to set (0 = x, 1 = y)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the component value",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 85,
            "description": "Copies the passed vector's components to this vector",
            "itemtype": "method",
            "name": "copy",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to copy the values from",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 98,
            "description": "Floors the vector components",
            "itemtype": "method",
            "name": "floor",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 110,
            "description": "Ceils the vector components",
            "itemtype": "method",
            "name": "ceil",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 122,
            "description": "Adds a vector to this one",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to add to this one",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 135,
            "description": "Adds two vectors to each other and stores the result in this vector",
            "itemtype": "method",
            "name": "addVectors",
            "params": [
                {
                    "name": "vector1",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "vector2",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 149,
            "description": "Adds a scalar value to the x and y components of this vector",
            "itemtype": "method",
            "name": "addScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The scalar value to add",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 162,
            "description": "Subtracts a vector from this one",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to subtract from this one",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 175,
            "description": "Subtracts two vectors from each other and stores the result in this vector",
            "itemtype": "method",
            "name": "subVectors",
            "params": [
                {
                    "name": "vector1",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "vector2",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 189,
            "description": "Multiplies the x and y components of this vector by a scalar value",
            "itemtype": "method",
            "name": "multiplyScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The value to multiply by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 202,
            "description": "Divides the x and y components of this vector by a scalar value",
            "itemtype": "method",
            "name": "divideScalar",
            "params": [
                {
                    "name": "scalar",
                    "description": "The value to divide by",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 219,
            "description": "Sets this vector components to the minimum value when compared to the passed vector's components",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 237,
            "description": "Sets this vector components to the maximum value when compared to the passed vector's components",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 255,
            "description": "Clamps the vectors components to be between min and max",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "min",
                    "description": "The minimum value a component can be",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value a component can be",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 280,
            "description": "Negates this vector (multiplies by -1)",
            "itemtype": "method",
            "name": "negate",
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 289,
            "description": "Performs the dot product between this vector and the passed one and returns the result",
            "itemtype": "method",
            "name": "dot",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns the dot product",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 299,
            "description": "Calculates the square length of the vector",
            "itemtype": "method",
            "name": "lengthSq",
            "return": {
                "description": "Returns the square length of the vector",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 308,
            "description": "Calculates the length of the vector",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "Returns the length of the vector",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 317,
            "description": "Normalizes this vector (divides by its length)",
            "itemtype": "method",
            "name": "normalize",
            "return": {
                "description": "Returns the normalized vector",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 326,
            "description": "Calculates the distance to the passed vector",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 336,
            "description": "Calculates the square distance to the passed vector",
            "itemtype": "method",
            "name": "distanceToSquared",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The square distance",
                "type": "Number"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 347,
            "description": "Sets the length of the vector",
            "itemtype": "method",
            "name": "setLength",
            "params": [
                {
                    "name": "length",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 363,
            "description": "Performs a linear interpolation between this vector and the passed vector",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "vector",
                    "description": "",
                    "type": "Vector"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 377,
            "description": "Checks if this vector is equal to another",
            "itemtype": "method",
            "name": "equals",
            "params": [
                {
                    "name": "vector",
                    "description": "The vector to compare with",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 387,
            "description": "Returns an array with the components of this vector as the elements",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "Returns an array of [x,y] form",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\Vector.js",
            "line": 396,
            "description": "Creates a new instance of Vector, with the same components as this vector",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "Returns a new Vector with the same values",
                "type": "Vector"
            },
            "class": "Vector"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 9,
            "description": "Ensures that some input is a vector, converts strings and arrays into vector objects",
            "itemtype": "method",
            "name": "ensureVector",
            "params": [
                {
                    "name": "vec",
                    "description": "The object to ensure becomes a vector",
                    "type": "Array|String|Vector"
                }
            ],
            "return": {
                "description": "The vector created with the passed values, if the values can't be made\n     into a Vector, then a new Vector with 0,0 is returned",
                "type": "Vector"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 38,
            "description": "An empty function that performs no action",
            "itemtype": "method",
            "name": "noop",
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 44,
            "description": "Performs an ajax request, and manages the callbacks passed in",
            "itemtype": "method",
            "name": "ajax",
            "params": [
                {
                    "name": "settings",
                    "description": "The settings of the ajax request, similar to jQuery's ajax function",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An XHR object",
                "type": "AjaxRequest"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 92,
            "description": "Wraps XMLHttpRequest in a cross-browser way.",
            "itemtype": "method",
            "name": "AjaxRequest",
            "return": {
                "description": "",
                "type": "ActiveXObject|XMLHttpRequest"
            },
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 122,
            "description": "This will take values and override the passed obj's properties with those values.\nThe difference from a normal object extend is that this will try to massage the passed\nvalue into the same type as the object's property. Also if the key for the value is not\nin the original object, it is not copied.",
            "itemtype": "method",
            "name": "setValues",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to extend the values into",
                    "type": "Object"
                },
                {
                    "name": "values",
                    "description": "The values to put into the object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "returns the updated object",
                "type": "Object"
            },
            "example": [
                "\n     var obj = { vec: new gf.Vector(), arr: [] },\n         vals = { vec: '2|5', arr: '5|10|11' };\n     gf.setValues(obj, vals);\n     //now obj is:\n     // { vec: gf.Vector(2, 5), arr: [5, 10, 11] }\n     "
            ],
            "class": "utils"
        },
        {
            "file": "src\\utils\\utils.js",
            "line": 202,
            "description": "Clamps a number between two values.",
            "itemtype": "method",
            "name": "clamp",
            "params": [
                {
                    "name": "num",
                    "description": "The number to clamp",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "The minimum value the number is allowed to be",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "The maximum value the number is allowed to be",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The clamped value",
                "type": "Number"
            },
            "class": "utils"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 20,
            "description": "The array of asset URLs that are going to be loaded",
            "itemtype": "property",
            "name": "assetURLs",
            "type": "Array",
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 28,
            "description": "The count of remaining assets to load",
            "itemtype": "property",
            "name": "loadCount",
            "type": "Number",
            "readonly": "",
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 37,
            "description": "A reference to the assets loaded by this loader. They are also put\nin the global gf.assetCache",
            "itemtype": "property",
            "name": "assets",
            "type": "Object",
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 46,
            "description": "A mapping of extensions to types. We assume all images are textures :)",
            "itemtype": "property",
            "name": "exts",
            "type": "Object",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 62,
            "description": "Starts the loading festivities. If called without any arguments it will load\nthe resources passed in at the ctor. If an array of resources is passed it will\nload those instead.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "items",
                    "description": "Array of resources to load instead of the object's resources",
                    "type": "Array"
                }
            ],
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 92,
            "description": "Adds a resource to the resources array.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the resource (to use as the key in the cache)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL to load the resource from (cross-domain not supported yet)",
                    "type": "String"
                }
            ],
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 105,
            "description": "Loads a texture image and caches the result",
            "itemtype": "method",
            "name": "loadTexture",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the resource (to use as the key in the cache)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL to load the resource from (cross-domain not supported yet)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the texture object, so it can be used even before it is fully loaded",
                "type": "Texture"
            },
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 131,
            "description": "Loads an audio clip and caches the result",
            "itemtype": "method",
            "name": "loadAudio",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the resource (to use as the key in the cache)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL to load the resource from (cross-domain not supported yet)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the audio object, so it can be used even before it is fully loaded",
                "type": "Audio"
            },
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 161,
            "description": "Loads a data (json) object. This is usually either SpriteSheet or TMX Map",
            "itemtype": "method",
            "name": "loadData",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the resource (to use as the key in the cache)",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "The URL to load the resource from (cross-domain not supported yet)",
                    "type": "String"
                }
            ],
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 244,
            "description": "Called whenever an asset is loaded, to keep track of when to emit complete and progress.",
            "itemtype": "method",
            "name": "onAssetLoaded",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "err",
                    "description": "An option error if there was an issue loading that resource",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "The type of asset loaded (texture, audio, world, or spritesheet)",
                    "type": "String"
                },
                {
                    "name": "asset",
                    "description": "The actual asset that was loaded",
                    "type": "Texture|Audio|Object"
                }
            ],
            "class": "AssetLoader"
        },
        {
            "file": "src\\AssetLoader.js",
            "line": 268,
            "description": "Stores a reference to an asset into the global and local caches",
            "itemtype": "method",
            "name": "_storeAsset",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the resource (to use as the key in the cache)",
                    "type": "String"
                },
                {
                    "name": "asset",
                    "description": "The actual asset that was loaded",
                    "type": "Texture|Audio|Object"
                }
            ],
            "class": "AssetLoader"
        },
        {
            "file": "src\\AudioPlayer.js",
            "line": 9,
            "description": "The game instance this belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\AudioPlayer.js",
            "line": 17,
            "description": "The pool of audio objects to play sounds with",
            "itemtype": "property",
            "name": "playing",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\AudioPlayer.js",
            "line": 27,
            "description": "When stopping or starting a sound, this is the time index to reset to",
            "itemtype": "property",
            "name": "resetTime",
            "type": "number",
            "default": "0",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\AudioPlayer.js",
            "line": 59,
            "description": "Plays a loaded audio clip",
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the sound clip to play. You can also pass the object returned from a previous play",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "The options object you can pass properties like \"loop,\" \"volume,\" \"channel\"",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The callback to call after the sound finishes playing",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The object returned can be passed to any audio function in the\n     first parameter to control that audio clip",
                "type": "Object"
            },
            "class": "AudoPlayer"
        },
        {
            "file": "src\\AudioPlayer.js",
            "line": 121,
            "description": "Stops a playing audio clip",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the sound clip to stop. You can also pass the object returned from a previous play",
                    "type": "String|Object"
                },
                {
                    "name": "channel",
                    "description": "The channel that the clip is playing on (not needed if you pass the clip object as the first parameter)",
                    "type": "Number"
                }
            ],
            "class": "AudoPlayer"
        },
        {
            "file": "src\\AudioPlayer.js",
            "line": 141,
            "description": "Pauses a playing audio clip",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "id",
                    "description": "The id of the sound clip to pause. You can also pass the object returned from a previous play",
                    "type": "String|Object"
                },
                {
                    "name": "channel",
                    "description": "The channel that the clip is playing on (not needed if you pass the clip object as the first parameter)",
                    "type": "Number"
                }
            ],
            "class": "AudoPlayer"
        },
        {
            "file": "src\\AudioPlayer.js",
            "line": 159,
            "description": "Plays all currently paused or stopped audio clips (only ones that have previously been started with gf.play)",
            "itemtype": "method",
            "name": "playAll",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\AudioPlayer.js",
            "line": 172,
            "description": "Stops all currently paused or playing audio clips",
            "itemtype": "method",
            "name": "stopAll",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\AudioPlayer.js",
            "line": 185,
            "description": "Pauses all currently playing audio clips",
            "itemtype": "method",
            "name": "pauseAll",
            "class": "AudoPlayer"
        },
        {
            "file": "src\\Camera.js",
            "line": 16,
            "description": "The game instance this belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 24,
            "description": "The bounds of that the camera can move to",
            "itemtype": "property",
            "name": "bounds",
            "type": "PIXI.Rectangle",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 34,
            "description": "When following an entity this is the space within the camera that it can move around\nbefore the camera moves to track it.",
            "itemtype": "property",
            "name": "_deadzone",
            "type": "PIXI.Rectangle",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 45,
            "description": "The target that the camera will follow",
            "itemtype": "property",
            "name": "_target",
            "type": "Entity",
            "readonly": "",
            "access": "private",
            "tagname": "",
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 55,
            "description": "The size of the camera",
            "itemtype": "property",
            "name": "size",
            "type": "Vector",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 64,
            "description": "Half of the size of the camera",
            "itemtype": "property",
            "name": "hSize",
            "type": "Vector",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 73,
            "description": "The _fx namespace has all the instance variables for all the fx",
            "itemtype": "property",
            "name": "_fx",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 107,
            "description": "Makes the camera flash with a certain color",
            "itemtype": "method",
            "name": "flash",
            "params": [
                {
                    "name": "color",
                    "description": "The color to flash the screen with",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "The time in milliseconds to fade away",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the flash has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 147,
            "description": "Stops a running flash, instantly hiding it",
            "itemtype": "method",
            "name": "stopFlash",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 158,
            "description": "Makes the camera fade into a color",
            "itemtype": "method",
            "name": "fade",
            "params": [
                {
                    "name": "color",
                    "description": "The color to fade into",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "The time in milliseconds to take to fade in",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the fade has completed",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 198,
            "description": "Stops a running fade, instantly hiding it",
            "itemtype": "method",
            "name": "stopFade",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 209,
            "description": "Shakes the camera around a bit, to show it who is boss.",
            "itemtype": "method",
            "name": "shake",
            "params": [
                {
                    "name": "intensity",
                    "description": "How hard to shake around",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "The time in milliseconds to shake for",
                    "type": "Number"
                },
                {
                    "name": "direction",
                    "description": "The axes to shake the camera in default is gf.Camera.SHAKE.BOTH",
                    "type": "Camera.SHAKE"
                },
                {
                    "name": "callback",
                    "description": "The callback to call when the shaking has stopped",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 258,
            "description": "Stops a running shake effect",
            "itemtype": "method",
            "name": "stopShake",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 274,
            "description": "Stops all currently running effects (flash, fade, shake)",
            "itemtype": "method",
            "name": "stopAll",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 287,
            "description": "Follows an entity with the camera, ensuring they are always center view. You can\npass a follow style to change the area an entity can move around in before we start\nto move with them.",
            "itemtype": "method",
            "name": "follow",
            "params": [
                {
                    "name": "entity",
                    "description": "The entity to follow",
                    "type": "Entity"
                },
                {
                    "name": "style",
                    "description": "The style of following, defaults to gf.Camera.FOLLOW.LOCKON",
                    "type": "Camera.FOLLOW"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 342,
            "description": "Stops following any entities",
            "itemtype": "method",
            "name": "unfollow",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 352,
            "description": "Focuses the camera on an x,y position. Ensures that the camera does\nnot go outside the bounds set with setBounds()",
            "itemtype": "method",
            "name": "focus",
            "params": [
                {
                    "name": "x",
                    "description": "The x coord to focus on, if a Point is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y coord to focus on",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 381,
            "description": "Pans the camera around by the x,y amount. Ensures that the camera does\nnot go outside the bounds set with setBounds()",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "x",
                    "description": "The x amount to pan, if a Point is passed the y param is ignored",
                    "type": "Number|Point"
                },
                {
                    "name": "y",
                    "description": "The y ammount to pan",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 416,
            "description": "Resizes the viewing area, this is called internally by your game instance\nwhen you call mygame.resize(). DO NOT CALL THIS DIRECTLY",
            "itemtype": "method",
            "name": "resize",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "w",
                    "description": "The new width",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "The new height",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 435,
            "description": "Sets the bounds the camera is allowed to go. Usually this is the world's\nmin and max, and is set for you.",
            "itemtype": "method",
            "name": "setBounds",
            "params": [
                {
                    "name": "x",
                    "description": "The minimum x coord (usually 0)",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The minimum y coord (usually 0)",
                    "type": "Number"
                },
                {
                    "name": "width",
                    "description": "The maximum x coord (usually map width)",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "The maximum y coord (usually map height)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\Camera.js",
            "line": 460,
            "description": "Called internally every frame. Updates all effects and the follow",
            "itemtype": "method",
            "name": "update",
            "return": {
                "description": "Returns iteself for chainability",
                "type": "Camera"
            },
            "class": "Camera"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 15,
            "description": "[read-only] The of children of this object.",
            "itemtype": "property",
            "name": "children",
            "type": "Array",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 20,
            "description": "The coordinate of the object relative to the local coordinates of the parent.",
            "itemtype": "property",
            "name": "position",
            "type": "Point",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 26,
            "description": "The scale factor of the object.",
            "itemtype": "property",
            "name": "scale",
            "type": "Point",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 32,
            "description": "The rotation of the object in radians.",
            "itemtype": "property",
            "name": "rotation",
            "type": "Number",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 38,
            "description": "The opacity of the object.",
            "itemtype": "property",
            "name": "alpha",
            "type": "Number",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 44,
            "description": "The visibility of the object.",
            "itemtype": "property",
            "name": "visible",
            "type": "Boolean",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 50,
            "description": "[read-only] The display object that contains this display object.",
            "itemtype": "property",
            "name": "parent",
            "type": "DisplayObject",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 56,
            "description": "[read-only] The stage the display object is connected to, or undefined if it is not connected to the stage.",
            "itemtype": "property",
            "name": "stage",
            "type": "Stage",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 62,
            "description": "This is the defined area that will pick up mouse / touch events. It is null by default.\nSetting it is a neat way of optimising the hitTest function that the interactionManager will use (as it will not need to hit test all the children)",
            "itemtype": "property",
            "name": "hitArea",
            "type": "Rectangle",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 73,
            "description": "A callback that is used when the users clicks on the displayObject with their mouse",
            "itemtype": "method",
            "name": "click",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 79,
            "description": "A callback that is used when the user clicks the mouse down over the sprite",
            "itemtype": "method",
            "name": "mousedown",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 85,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject\nfor this callback to be fired the mouse must have been pressed down over the displayObject",
            "itemtype": "method",
            "name": "mouseup",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 92,
            "description": "A callback that is used when the user releases the mouse that was over the displayObject but is no longer over the displayObject\nfor this callback to be fired, The touch must have started over the displayObject",
            "itemtype": "method",
            "name": "mouseupoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 99,
            "description": "A callback that is used when the users mouse rolls over the displayObject",
            "itemtype": "method",
            "name": "mouseover",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 105,
            "description": "A callback that is used when the users mouse leaves the displayObject",
            "itemtype": "method",
            "name": "mouseout",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 115,
            "description": "A callback that is used when the users taps on the sprite with their finger\nbasically a touch version of click",
            "itemtype": "method",
            "name": "tap",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 122,
            "description": "A callback that is used when the user touch's over the displayObject",
            "itemtype": "method",
            "name": "touchstart",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 128,
            "description": "A callback that is used when the user releases a touch over the displayObject",
            "itemtype": "method",
            "name": "touchend",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 134,
            "description": "A callback that is used when the user releases the touch that was over the displayObject\nfor this callback to be fired, The touch must have started over the sprite",
            "itemtype": "method",
            "name": "touchendoutside",
            "params": [
                {
                    "name": "interactionData",
                    "description": "",
                    "type": "InteractionData"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 141,
            "description": "Inherited Methods",
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 145,
            "description": "Indicates if the sprite will have touch and mouse interactivity. It is false by default",
            "itemtype": "method",
            "name": "setInteractive",
            "params": [
                {
                    "name": "interactive",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 151,
            "description": "Adds a child to the object.",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 157,
            "description": "Adds a child to the object at a specified index. If the index is out of bounds an error will be thrown",
            "itemtype": "method",
            "name": "addChildAt",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "DisplayObject"
                },
                {
                    "name": "index",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\DisplayObject.js",
            "line": 164,
            "description": "Removes a child from the object.",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "child",
                    "description": "",
                    "type": "DisplayObject"
                }
            ],
            "class": "DisplayObject"
        },
        {
            "file": "src\\Entity.js",
            "line": 24,
            "description": "The game instance this belongs to",
            "itemtype": "property",
            "name": "game",
            "type": "Game",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 32,
            "description": "The type of the entity",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'neutral'",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 41,
            "description": "Can it collide with other entities",
            "itemtype": "property",
            "name": "collidable",
            "type": "Boolean",
            "default": "true",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 50,
            "description": "Can collide with the map when moving",
            "itemtype": "property",
            "name": "mapCollidable",
            "type": "Boolean",
            "default": "true",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 59,
            "description": "The velocity of the entity. You can set these in Tiled by using \"x|y\" notation\nvelocity of the entity (units per tick)",
            "itemtype": "property",
            "name": "velocity",
            "type": "Vector",
            "default": "new gf.Vector(0, 0)",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 69,
            "description": "Max velocity to cap the entity at (units per tick)",
            "itemtype": "property",
            "name": "maxVelocity",
            "type": "Vector",
            "default": "new gf.Vector(15, 15)",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 78,
            "description": "Acceleration of the entity (units per second)",
            "itemtype": "property",
            "name": "accel",
            "type": "Vector",
            "default": "new gf.Vector(250, 250)",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 87,
            "description": "Friction to apply to this entity",
            "itemtype": "property",
            "name": "friction",
            "type": "Vector",
            "default": "0",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 96,
            "description": "Gravity to apply to this entity",
            "itemtype": "property",
            "name": "gravity",
            "type": "Vector",
            "default": "0.98 (earth's gravity)",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 105,
            "description": "Whether or not the entity is \"alive\", advisory only",
            "itemtype": "property",
            "name": "alive",
            "type": "Boolean",
            "default": "true",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 114,
            "description": "Whether the entity is falling (read only)",
            "itemtype": "property",
            "name": "falling",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 124,
            "description": "Whether the entity is jumping (read only)",
            "itemtype": "property",
            "name": "jumping",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 134,
            "description": "Whether the entity is on a ladder tile (read only)",
            "itemtype": "property",
            "name": "onladder",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 144,
            "description": "The view position is a whole-number version of position.",
            "itemtype": "property",
            "name": "viewPosition",
            "type": "Point",
            "readonly": "",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 161,
            "description": "Calculates distance between this object and another",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "Distance between this entity and another",
                "type": "Number"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 177,
            "description": "Computes the velocity taking into account gravity, friction, etc",
            "itemtype": "method",
            "name": "computeVelocity",
            "params": [
                {
                    "name": "vel",
                    "description": "The Vector to apply the changes to",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The modified vector",
                "type": "Vector"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 204,
            "description": "Applies friction to a velocity, usually the current velocity",
            "itemtype": "method",
            "name": "applyFriction",
            "params": [
                {
                    "name": "vel",
                    "description": "The velocity to apply the friction to",
                    "type": "Number"
                },
                {
                    "name": "friction",
                    "description": "The friction factor to apply",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The modified velocity, with friction applied",
                "type": "Object"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 223,
            "description": "Checks if this entity intersects with the passed object\nfrom http://gamedev.stackexchange.com/questions/586/what-is-the-fastest-way-to-work-out-2d-bounding-box-intersection",
            "itemtype": "method",
            "name": "intersects",
            "params": [
                {
                    "name": "obj",
                    "description": "The Entity to check if this intersects with",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 235,
            "description": "Checks if this entity collides with any Entities, and if so, a penetration vector is calculated.\nfrom http://gamedev.stackexchange.com/questions/586/what-is-the-fastest-way-to-work-out-2d-bounding-box-intersection",
            "itemtype": "method",
            "name": "checkCollisions",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 267,
            "description": "Calculate the velocity of the entity, and then apply it. This is different than moveEntity\nbecause it checks for map collisions, and applies gravity and friction with computeVelocity",
            "itemtype": "method",
            "name": "updateMovement",
            "return": {
                "description": "Returns the map colliders that the entity is interacting with",
                "type": "Array"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 319,
            "description": "Moves the entity to a new position using the velocity.",
            "itemtype": "method",
            "name": "moveEntity",
            "params": [
                {
                    "name": "vel",
                    "description": "The optional velocity to move the entity.",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Entity"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 345,
            "description": "Convenience method for setting the position of an Entity.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "X coord to put the sprite at.\n      If an Array, Vector, or Point is passed then the y parameter is ignored",
                    "type": "Number|Array|Vector|Point"
                },
                {
                    "name": "y",
                    "description": "Y coord to put the sprite at",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Entity"
            },
            "example": [
                "\n     spr.setPosition(1, 1)\n         .setPosition([5, 5])\n         .setPosition(new gf.Point(10, 10))\n         .setPosition(new gf.Vector(20, 20));"
            ],
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 367,
            "description": "Overrides base update to do some calculations. Called internally on each frame",
            "itemtype": "method",
            "name": "update",
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 377,
            "description": "On Collision Event\n     called when this object collides into another, or is being collided into by another\n     by default if something collides with a collectable entity we remove the collectable",
            "itemtype": "method",
            "name": "onCollision",
            "params": [
                {
                    "name": "vel",
                    "description": "Collision Vector",
                    "type": "Vector"
                },
                {
                    "name": "obj",
                    "description": "Colliding object",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Entity"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 393,
            "description": "On Move Event\n     called when this entity moves",
            "itemtype": "method",
            "name": "onMove",
            "params": [
                {
                    "name": "vel",
                    "description": "Velocity the entity moved",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Entity"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 404,
            "description": "On Break Tile Event\n     called when a tile is broken",
            "itemtype": "method",
            "name": "onBreakTile",
            "params": [
                {
                    "name": "tile",
                    "description": "the tile that is broken",
                    "type": "Unkown"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Entity"
            },
            "class": "Entity"
        },
        {
            "file": "src\\Entity.js",
            "line": 417,
            "description": "Entity types",
            "itemtype": "property",
            "name": "TYPE",
            "type": "Object",
            "class": "Entity"
        },
        {
            "file": "src\\Game.js",
            "line": 13,
            "description": "The default gravity to use for the game, defaults to 0.98 (Earth's Gravity)",
            "itemtype": "property",
            "name": "gravity",
            "type": "Number",
            "default": "0.98",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 22,
            "description": "The default friction to use for the game, defaults to 0,0",
            "itemtype": "property",
            "name": "friction",
            "type": "Vector",
            "default": "new gf.Vector(0, 0)",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 31,
            "description": "The method used to render values to the screen (either webgl, canvas, or css3)",
            "itemtype": "property",
            "name": "renderMethod",
            "type": "String",
            "default": "'webgl'",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 40,
            "description": "The player entities added into the game",
            "itemtype": "property",
            "name": "players",
            "type": "{Array}",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 48,
            "description": "Raw PIXI.stage instance",
            "itemtype": "property",
            "name": "stage",
            "type": "PIXI.Stage",
            "readonly": "",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 60,
            "description": "Raw Clock instance for internal timing",
            "itemtype": "property",
            "name": "clock",
            "type": "Clock",
            "readonly": "",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 69,
            "description": "Raw rendering engine",
            "itemtype": "property",
            "name": "renderer",
            "type": "PIXI.WebGLRenderer|PIXI.CanvasRenderer",
            "readonly": "",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 101,
            "description": "The domElement that we are putting our rendering canvas into (the container)",
            "itemtype": "property",
            "name": "container",
            "type": "DOMELement",
            "readonly": "",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 110,
            "description": "Maximum Z value",
            "itemtype": "property",
            "name": "MAX_Z",
            "type": "{Number}",
            "default": "500",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 121,
            "description": "The loader for this game instance",
            "itemtype": "property",
            "name": "loader",
            "type": "AssetLoader",
            "readonly": "",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 130,
            "description": "The audio player for this game instance",
            "itemtype": "property",
            "name": "audio",
            "type": "AudioPlayer",
            "readonly": "",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 139,
            "description": "The input instance for this game",
            "itemtype": "property",
            "name": "input",
            "type": "InputManager",
            "readonly": "",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 148,
            "description": "The camera you view the scene through",
            "itemtype": "property",
            "name": "camera",
            "type": "Camera",
            "readonly": "",
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 170,
            "description": "Allows you to resize the game area",
            "itemtype": "method",
            "name": "resize",
            "params": [
                {
                    "name": "width",
                    "description": "Width to resize to",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "Height to resize to",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 189,
            "description": "Adds an object to the current stage",
            "itemtype": "method",
            "name": "addChild",
            "params": [
                {
                    "name": "obj",
                    "description": "The sprite to the stage",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 211,
            "description": "Removes a sprite from the stage",
            "itemtype": "method",
            "name": "removeChild",
            "params": [
                {
                    "name": "obj",
                    "description": "The sprite to the stage",
                    "type": "Sprite"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 228,
            "description": "Loads the world map into the game",
            "itemtype": "method",
            "name": "loadWorld",
            "params": [
                {
                    "name": "world",
                    "description": "The map to load as the current world",
                    "type": "String|Map"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 253,
            "description": "Begins the render loop",
            "itemtype": "method",
            "name": "render",
            "return": {
                "description": "Returns itself for chainability",
                "type": "Game"
            },
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 265,
            "description": "Check if passed entity collides with any others",
            "itemtype": "method",
            "name": "checkCollisions",
            "params": [
                {
                    "name": "obj",
                    "description": "The sprite to the stage",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "Returns an array of colliders",
                "type": "Array"
            },
            "class": "game"
        },
        {
            "file": "src\\Game.js",
            "line": 295,
            "description": "The looping render tick",
            "itemtype": "method",
            "name": "_tick",
            "access": "private",
            "tagname": "",
            "class": "game"
        },
        {
            "file": "src\\Sprite.js",
            "line": 31,
            "description": "The width of the sprite",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "default": "0",
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 40,
            "description": "The height of the sprite",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "default": "0",
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 49,
            "description": "The name of this sprite",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "''",
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 58,
            "description": "The defined animations for this Sprite, this maps the names to the childIndexes",
            "itemtype": "property",
            "name": "anim",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "Object",
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 68,
            "description": "The currently active animation",
            "itemtype": "property",
            "name": "currentAnim",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "type": "Object",
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 78,
            "description": "The the anchor point for the textures",
            "itemtype": "property",
            "name": "anchor",
            "type": "Point",
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 127,
            "description": "Defines a new animation on the Sprite",
            "itemtype": "method",
            "name": "addAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation, any string you want to name it",
                    "type": "String"
                },
                {
                    "name": "frames",
                    "description": "The frames of the animation, you can pass one gf.Texture\n     as a frame, or an Array of gf.Texture's",
                    "type": "Texture|Array"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Sprite"
            },
            "example": [
                "\n     spr.addAnimation('walk-left', new gf.Texture())\n         .addAnimation('walk-right', [new gf.Texture(), new gf.Texture()]);"
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 188,
            "description": "Sets the active animation of the sprite, and starts the animation at index 0",
            "itemtype": "method",
            "name": "setActiveAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation to play (defined with addAnimation());",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback when the animation completes, NOT YET IMPLEMENTED",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Sprite"
            },
            "example": [
                "\n     spr.addAnimation('me', new gf.Texture())\n         .setActiveAnimation('me');"
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 224,
            "description": "Convenience method for setting the position of the Sprite.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "X coord to put the sprite at.\n      If an Array, Vector, or Point is passed then the y parameter is ignored",
                    "type": "Number|Array|Vector|Point"
                },
                {
                    "name": "y",
                    "description": "Y coord to put the sprite at",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns itself for chainability",
                "type": "Sprite"
            },
            "example": [
                "\n     spr.setPosition(1, 1)\n         .setPosition([5, 5])\n         .setPosition(new gf.Point(10, 10))\n         .setPosition(new gf.Vector(20, 20));"
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 253,
            "description": "Checks if the name is the active animation",
            "itemtype": "method",
            "name": "isActiveAnimation",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the animation to check if it is currently active",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the animation is active, false otherwise.",
                "type": "Boolean"
            },
            "example": [
                "\n     spr.addAnimation('walk-left', new gf.Texture())\n         .isActiveAnimation('walk-left'); //false\n\n     spr.setActiveAnimation('walk-left')\n         .isActiveAnimation('walk-left'); //true"
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 269,
            "description": "Sets whether or not this sprite is interactive (can be clicked)",
            "itemtype": "method",
            "name": "setInteractive",
            "params": [
                {
                    "name": "interactive",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 293,
            "description": "Stops the currently active animation",
            "itemtype": "method",
            "name": "stop",
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 298,
            "description": "Plays the currently active animation",
            "itemtype": "method",
            "name": "play",
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 303,
            "description": "Stops the currently active animation and goes to a specific frame",
            "itemtype": "method",
            "name": "gotoAndStop",
            "params": [
                {
                    "name": "frameNumber",
                    "description": "frame index to stop at",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\Sprite.js",
            "line": 309,
            "description": "Goes to a specific frame and begins playing the currently active animation",
            "itemtype": "method",
            "name": "gotoAndPlay",
            "params": [
                {
                    "name": "frameNumber",
                    "description": "frame index to start at",
                    "type": "Number"
                }
            ],
            "class": "Sprite"
        },
        {
            "file": "src\\core.js",
            "line": 1,
            "license": "GrapeFruit Game Engine\nCopyright (c) 2012, Chad Engler\n\nGrapeFruit is licensed under the MIT License.\nhttp://www.opensource.org/licenses/mit-license.php\n\nKnown Limiting Features:\n  - Canvas\n      - IE 9+\n      - FF 2+\n      - Chrome 4+\n      - Safari 3.1+\n      - Opera 9+\n\n  - WebGL\n      - IE 11+\n      - FF 4+\n      - Chrome 8+\n      - Safari 6+\n      - Opera 12+\n\n  - Object.create\n      - IE 9+\n      - FF 4+\n      - Chrome 7+\n      - Safari 5+\n      - Opera 12+",
            "class": "Point"
        },
        {
            "file": "src\\core.js",
            "line": 31,
            "description": "The base grapefruit object",
            "class": "Point"
        },
        {
            "file": "src\\core.js",
            "line": 65,
            "description": "The current grapefruit version",
            "itemtype": "property",
            "name": "version",
            "type": "String",
            "class": "EventTarget"
        },
        {
            "file": "src\\core.js",
            "line": 73,
            "description": "The cached assets loaded by any loader",
            "itemtype": "property",
            "name": "assetCache",
            "type": "Object",
            "class": "EventTarget"
        },
        {
            "file": "src\\core.js",
            "line": 87,
            "description": "The current user agent string",
            "itemtype": "property",
            "name": "ua",
            "type": "String",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 95,
            "description": "Whether or not canvas is supported",
            "itemtype": "property",
            "name": "canvas",
            "type": "bool",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 103,
            "description": "Whether or not webgl is supported",
            "itemtype": "property",
            "name": "webgl",
            "type": "bool",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 111,
            "description": "Whether or not web workers are supported",
            "itemtype": "property",
            "name": "workers",
            "type": "bool",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 119,
            "description": "Whether or not typed arrays are supported",
            "itemtype": "property",
            "name": "typedArrays",
            "type": "bool",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 127,
            "description": "Whether or not the filesystem API is supported",
            "itemtype": "property",
            "name": "fileapi",
            "type": "bool",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 135,
            "description": "Whether or not the audio elements are supported, and if so which types",
            "itemtype": "property",
            "name": "audio",
            "type": "Object",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 149,
            "description": "Whether or not local storage is supported",
            "itemtype": "property",
            "name": "localStorage",
            "type": "bool",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 157,
            "description": "Whether or not touch is supported",
            "itemtype": "property",
            "name": "touch",
            "type": "bool",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 165,
            "description": "Whether or not the gamepad API is supported",
            "itemtype": "property",
            "name": "gamepad",
            "type": "bool",
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 194,
            "description": "Compares version numbers, useful for plugins to specify a required gf version",
            "itemtype": "method",
            "name": "checkVersion",
            "params": [
                {
                    "name": "first",
                    "description": "The first version",
                    "type": "String"
                },
                {
                    "name": "second",
                    "description": "The second version",
                    "type": "String"
                }
            ],
            "return": {
                "description": "\n     returns a number representing how far off a version is.\n\n     will return a negative value if the first version is behind the second,\n     the negative number will show how many versions behind it is on largest version\n     point.\n     That is: '1.0' compared with '1.1' will yield -1\n     and    : '1.2.3' compared with '1.2.1' will yield -2\n\n     0 is returned if the versions match, and a positive number is returned if\n     the first version is larger than the second.",
                "type": "Number"
            },
            "class": "support"
        },
        {
            "file": "src\\core.js",
            "line": 228,
            "description": "Inherits the prototype of a parent object.\nfrom: https://github.com/isaacs/inherits/blob/master/inherits.js",
            "itemtype": "method",
            "name": "inherits",
            "params": [
                {
                    "name": "child",
                    "description": "The Child to inherit the prototype",
                    "type": "Object"
                },
                {
                    "name": "parent",
                    "description": "The Parent to inherit from",
                    "type": "Object"
                },
                {
                    "name": "proto",
                    "description": "The prototype",
                    "type": "Object"
                }
            ],
            "class": "support"
        },
        {
            "file": "src\\entityPool.js",
            "line": 9,
            "description": "Adds an entity Object to the pool",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Entity to add",
                    "type": "String"
                },
                {
                    "name": "obj",
                    "description": "The Entity or decendant to add to the pool",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the passed object",
                "type": "Object"
            },
            "example": [
                "\n     //create a new ckass to be instantiated\n     var Bug = gf.entityPool.add('bug', gf.Entity.extend({\n         //ctor function\n         init: function(pos, settings) {\n             //call the base ctor\n             this._super(pos, settings);\n\n             this.color = 'red';\n         },\n         beBug: function() {\n             console.log(\"I'm a bug\");\n         }\n     }));\n\n     //then later in your game code\n     var mybug = gf.entityPool.create('bug', {\n         pos: [10, 10]\n     });"
            ],
            "class": "entityPool"
        },
        {
            "file": "src\\entityPool.js",
            "line": 39,
            "description": "Checks if the entity exists in the pool",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Entity to check if is in the pool",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the passed object",
                "type": "Boolean"
            },
            "class": "entityPool"
        },
        {
            "file": "src\\entityPool.js",
            "line": 49,
            "description": "Creates a new entity from the pool",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The user-defined name of the Entity to check if is in the pool",
                    "type": "String"
                },
                {
                    "name": "props",
                    "description": "The properties that would normally be passed as the \"settings\" of the Entity",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new instance of the object from the pool",
                "type": "Entity"
            },
            "example": [
                "\n     //create a new ckass to be instantiated\n     var Bug = function(pos, settings) {\n         gf.Entity.call(this, pos, settings);\n         this.color = 'red';\n     };\n\n     gf.inherits(Bug, gf.Entity, {\n         beBug: function() {\n             console.log(\"I'm a bug\");\n         }\n     });\n\n     //then later in your game code\n     var mybug = gf.entityPool.create('bug', {\n         pos: [10, 10] //pos, and/or position properties get sent as the first param to the ctor\n     });"
            ],
            "class": "entityPool"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " src\\core.js:1"
        },
        {
            "message": "Missing item type\ninput object",
            "line": " src\\input\\Input.js:1"
        },
        {
            "message": "Missing item type\nInherited Methods",
            "line": " src\\DisplayObject.js:141"
        },
        {
            "message": "Missing item type",
            "line": " src\\core.js:1"
        },
        {
            "message": "Missing item type\nThe base grapefruit object",
            "line": " src\\core.js:31"
        }
    ]
}